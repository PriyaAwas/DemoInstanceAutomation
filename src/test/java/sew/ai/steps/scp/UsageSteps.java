package sew.ai.steps.scp;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.asserts.SoftAssert;
import sew.ai.api.endpoints.usage.UsageEndpoints;
import sew.ai.api.pojos.usage.UsageParams;
import sew.ai.api.pojos.usage.UsageTilesParam;
import sew.ai.api.pojos.usage.WeatherOverlayParams;
import sew.ai.api.resPojos.GenerationResponse;
import sew.ai.api.resPojos.TilesDetailResponse;
import sew.ai.api.resPojos.UsageResponse;
import sew.ai.api.resPojos.WeatherDataResponse;
import sew.ai.config.CSPConfiguration;
import sew.ai.enums.Intervals;
import sew.ai.enums.Uoms;
import sew.ai.helpers.props.Constants;
import sew.ai.helpers.props.FilePaths;
import sew.ai.helpers.props.ResourcePaths;
import sew.ai.helpers.props.SQLQueries;
import sew.ai.helpers.reporters.ExtentLogger;
import sew.ai.models.Meter;
import sew.ai.models.User;
import sew.ai.pageObjects.scp.UsagePage;
import sew.ai.utils.*;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import static sew.ai.utils.ExcelUtils.*;

public class UsageSteps extends UsagePage {
    private static final Logger log = LogManager.getLogger(UsageSteps.class);
    public static PropertiesUtil usageTextProp;
    private String periodicity = null, fromDate = null, toDate = null, meter = null;
    Meter[] amiMeters, nonAMIMeters, electricMeters, waterMeters, gasMeters, solarMeters;
    List<UsageResponse> usageResponseAPI;
    List<GenerationResponse> generationResponseAPI;
    Boolean isComboAMI = true;
    UsageParams usageParams;

    public UsageSteps(WebDriver driver) {
        super(driver);
        usageTextProp = new PropertiesUtil(
                FilePaths.SCP_TEXT_PROPERTIES + Constants.USAGE_TXT_FILENAME
        );
    }

    /**
     * Verify is the current page is usage page.
     *
     * @param url   expected usage page URL
     * @param title expected usage page title.
     * @return status is usage page or not.
     */
    public Boolean isUsagePage(String url, String title) {
        Boolean isUsagePage = false;
        log.info("Checking that the current page is usage page.");
        if (getCurrentUrl().contains(url.toLowerCase()) && getCurrentTitle().equalsIgnoreCase(title))
            isUsagePage = true;
        log.info("The current page is usage page {}: " + isUsagePage);
        return isUsagePage;
    }

    /**
     * Verify electric usage objects.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyElectricUsagesObjects(SoftAssert softAssert, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate electric meters
        usageEndpoints.segregateElectricMeters(meters);
        electricMeters = UsageEndpoints.electricMeters.toArray(new Meter[0]);
        // Segregate solar meters
        usageEndpoints.segregateSolarMeters(meters);
        solarMeters = UsageEndpoints.solarMeters.toArray(new Meter[0]);
        // Check whether having electric meter or not
        if (electricMeters.length > 0) {
            ExtentLogger.logInfo("Electric meters are linked to the account.");
            // Verify electric tab should visible and selected by default
            Assert.assertTrue(isElectricTabVisible(),
                    "Electric tab is not visible.");
            Assert.assertTrue(isElectricTabActive(),
                    "Electric tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verifying Monthly Interval Tab
            softAssert.assertTrue(isMeterDropDownVisible(),
                    "Meter drop-down is not visible for multiple meters.");
            softAssert.assertTrue(isMonthlyIntervalLinkVisible(),
                    "Monthly interval is not visible.");
            softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                    "Monthly interval is not active.");
            // Verifying the Units tabs
            softAssert.assertTrue(isMeasuringUnitLinkVisible(),
                    "Measuring unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkVisible(),
                    "Currency unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkActive(),
                    "Currency unit tab is not active.");
            // Verifying the period selection for the monthly interval
            softAssert.assertTrue(isCalendarLabelVisible(),
                    "Calendar label not visible");
            softAssert.assertTrue(getCalendarLabel().contains("Period: From"));
            softAssert.assertTrue(getCalendarLabel().contains("To"));
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify average this year tile.
                softAssert.assertEquals(getAverageThisYearLabel(),
                        usageTextProp.getPropValue("lblAverageThisYear"),
                        "Average this year label not matched."
                );
                softAssert.assertTrue(isAverageThisYearValueVisible(),
                        "Average this year is not visible.");
                softAssert.assertTrue(getAverageThisYearValue().contains(currencyConfig),
                        "Average This Year currency config is not same as CSP Currency config.");
                // Verify highest this year tile.
                softAssert.assertEquals(
                        getHighestThisYearLabel(),
                        usageTextProp.getPropValue("lblHighestThisYear"),
                        "Highest this year label not matched."
                );
                softAssert.assertTrue(isHighestThisYearValueVisible(),
                        "Highest this year is not visible.");
                softAssert.assertTrue(getHighestThisYearValue().contains(currencyConfig),
                        "Highest this Year currency config is not same as CSP Currency config.");
                // Verify monthly electric usage data for ALL meter scenario
                if (electricMeters.length > 1) {
                    ExtentLogger.logInfo("Number of electric meters linked to the account {} " + electricMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(
                            getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < electricMeters.length; i++) {
                        if (electricMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    verifyElectricBarChartSection(softAssert, currencyConfig, "monthly");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        ExtentLogger.logInfo("Verifying so far this month tile.");
                        // Verify so far this month tile
                        softAssert.assertTrue(isSoFarThisMonthTileVisible(),
                                "So far this month tile not visible.");
                        softAssert.assertEquals(getSoFarThisLabelMonth(),
                                usageTextProp.getPropValue("lblSoFarThisMonth"),
                                "So far this month label not matched."
                        );
                        softAssert.assertTrue(getSoFarThisValueMonth().contains(currencyConfig),
                                "Currency config is not matching for so far this month.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        ExtentLogger.logInfo("Verifying projected usage tile.");
                        // Verify projected usage tile
                        softAssert.assertTrue(isProjectedUsageTileVisible(),
                                "Projected usage tile not visible.");
                        softAssert.assertEquals(getProjectedUsageLabelMonth(),
                                usageTextProp.getPropValue("lblProjectedUsage"),
                                "Projected usage label not matched."
                        );
                        softAssert.assertTrue(getProjectedUsageValue().contains(currencyConfig),
                                "Currency config is not matching for projected usage.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyElectricBarChartSection(softAssert, currencyConfig, "daily");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyElectricBarChartSection(softAssert, currencyConfig, "hourly");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                /*softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");*/
                                verifyElectricBarChartSection(softAssert, currencyConfig, "intervals");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is visible for non AMI combo.");
                        softAssert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is visible for non AMI combo.");
                        softAssert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Minutes interval is visible for non AMI combo.");
                        ExtentLogger.logPass("Verifications for Non AMI combo is passed successfully.");
                    }
                    // Check for single meter as well if its Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    for (Meter meter : electricMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyElectricBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        ExtentLogger.logInfo("Verifying so far this month tile.");
                        // Verify so far this month tile
                        softAssert.assertTrue(isSoFarThisMonthTileVisible(),
                                "So far this month tile not visible.");
                        softAssert.assertEquals(getSoFarThisLabelMonth(),
                                usageTextProp.getPropValue("lblSoFarThisMonth"),
                                "So far this month label not matched."
                        );
                        softAssert.assertTrue(getSoFarThisValueMonth().contains(currencyConfig),
                                "Currency config is not matching for so far this month.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        ExtentLogger.logInfo("Verifying projected usage tile.");
                        // Verify projected usage tile
                        softAssert.assertTrue(isProjectedUsageTileVisible(),
                                "Projected usage tile not visible.");
                        softAssert.assertEquals(getProjectedUsageLabelMonth(),
                                usageTextProp.getPropValue("lblProjectedUsage"),
                                "Projected usage label not matched."
                        );
                        softAssert.assertTrue(getProjectedUsageValue().contains(currencyConfig),
                                "Currency config is not matching for projected usage.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyElectricBarChartSection(softAssert, currencyConfig, "daily");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyElectricBarChartSection(softAssert, currencyConfig, "hourly");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                /*softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");*/
                                verifyElectricBarChartSection(softAssert, currencyConfig, "intervals");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyElectricBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is visible for non AMI combo.");
                        softAssert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is visible for non AMI combo.");
                        softAssert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Minutes interval is visible for non AMI combo.");
                    }
                }
                // Check if there is single meter linked to the account
                else if (electricMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (electricMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyElectricBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        ExtentLogger.logInfo("Verifying so far this month tile.");
                        // Verify so far this month tile
                        softAssert.assertTrue(isSoFarThisMonthTileVisible(),
                                "So far this month tile not visible.");
                        softAssert.assertEquals(getSoFarThisLabelMonth(),
                                usageTextProp.getPropValue("lblSoFarThisMonth"),
                                "So far this month label not matched."
                        );
                        softAssert.assertTrue(getSoFarThisValueMonth().contains(currencyConfig),
                                "Currency config is not matching for so far this month.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        ExtentLogger.logInfo("Verifying projected usage tile.");
                        // Verify projected usage tile
                        softAssert.assertTrue(isProjectedUsageTileVisible(),
                                "Projected usage tile not visible.");
                        softAssert.assertEquals(getProjectedUsageLabelMonth(),
                                usageTextProp.getPropValue("lblProjectedUsage"),
                                "Projected usage label not matched."
                        );
                        softAssert.assertTrue(getProjectedUsageValue().contains(currencyConfig),
                                "Currency config is not matching for projected usage.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyElectricBarChartSection(softAssert, currencyConfig, "daily");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyElectricBarChartSection(softAssert, currencyConfig, "hourly");
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                verifyElectricBarChartSection(softAssert, currencyConfig, "intervals");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (electricMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyElectricBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is visible for non AMI combo.");
                        softAssert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is visible for non AMI combo.");
                        softAssert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Minutes interval is visible for non AMI combo.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked electric meter/meters.");
            }
        }
        // If there is no electric meter linked
        else {
            ExtentLogger.logSkip("There is no Electric meter linked to the account.");
        }
    }

    /**
     * Verify complete bar chart section for electric meter as per the given interval.
     *
     * @param softAssert     to soft assert all the validations.
     * @param currencyConfig to verify the currency as per configurations.
     * @param interval       to verify the UI as per interval selection.
     */
    public void verifyElectricBarChartSection(SoftAssert softAssert, String currencyConfig, String interval) {
        ExtentLogger.logInfo("Verifying the bar chart section for " + interval + " interval.");
        ExtentLogger.logInfo("Verifying the Usage Bar chart X axis and Y axis labels");
        // Verifying Y Axis
        softAssert.assertEquals(getYAxisLabel(),
                usageTextProp.getPropValue("lblYAxisUsage").replace("{$CurrencyOrUnit}",
                        currencyConfig),
                "Y Axis label not matched."
        );
        // Verifying X Axis
        List<String> xAxisLabels = getXAxisLabels();
        if (interval.equalsIgnoreCase("monthly")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "MMM yyyy"));
            }
        }
        else if (interval.equalsIgnoreCase("daily")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "MMM d, yyyy"));
            }
        }
        else if (interval.equalsIgnoreCase("hourly")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "HH:mm aa"));
            }
        }
        else if (interval.equalsIgnoreCase("minutes")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "HH:mm aa"));
            }
        }
        ExtentLogger.logPass("The Usage Bar chart X axis and Y axis labels verified successfully.");
        // Verifying Legends Labels and Colors
        ExtentLogger.logInfo("Verifying the Usage Bar chart legends label and colors");
        softAssert.assertEquals(
                getElectricLowUsageLabel(),
                usageTextProp.getPropValue("lblLowUsageLegend"),
                "Low usage label not matched."
        );
        softAssert.assertEquals(
                getLowUsageLegendColor(),
                usageTextProp.getPropValue("lowUsageLegendColor"),
                "Low usage legend color not matched."
        );
        softAssert.assertEquals(
                getAverageUsageLabel(),
                usageTextProp.getPropValue("lblAverageUsageLegend"),
                "Average usage label not matched."
        );
        softAssert.assertEquals(
                getAverageUsageLegendColor(),
                usageTextProp.getPropValue("avgUsageLegendColor"),
                "Average usage legend color not matched."
        );
        softAssert.assertEquals(
                getHighUsageLabel(),
                usageTextProp.getPropValue("lblHighUsageLegend"),
                "High usage label not matched."
        );
        softAssert.assertEquals(
                getHighUsageLegendColor(),
                usageTextProp.getPropValue("highUsageLegendColor"),
                "High usage legend color not matched."
        );
        ExtentLogger.logPass("Usage Bar chart legends label and colors verified successfully.");
        // Verify Bar Chart Footer HyperLinks
        ExtentLogger.logInfo("Verifying Bar Chart footer hyperlinks.");
        // Verify rates link
        softAssert.assertEquals(getRatesLinkLabel(),
                usageTextProp.getPropValue("lblRatesLink"),
                "Rates link label not matched."
        );
        softAssert.assertEquals(getRatesIconLabel(),
                currencyConfig,
                "Rates currency symbol not matched."
        );
        // Verify export usages link
        softAssert.assertEquals(getExportUsageLabel(),
                usageTextProp.getPropValue("lblExportUsagesLink"),
                "Export usages link label not matched."
        );
        // Verify set usage alert link
        softAssert.assertEquals(getSetUsageAlertsLabel(),
                usageTextProp.getPropValue("lblSetUsageAlertsLink"),
                "Set usage alerts link label not matched."
        );
        // Verify green button link
        softAssert.assertEquals(getGreenButtonLabel(),
                usageTextProp.getPropValue("lblGreenButton"),
                "Green button label not matched."
        );
        ExtentLogger.logInfo("Verifying the Net Usage toggle");
        if (solarMeters.length > 0) {
            // Verify Net Usage toggle
            softAssert.assertTrue(isNetUsageToggleVisible(),
                    "Net Usage toggle not visible.");
            softAssert.assertEquals(getNetUsageToggleLabel(),
                    usageTextProp.getPropValue("lblNetUsageToggle"),
                    "Net usage toggle label not matched.");
            softAssert.assertFalse(isNetUsageToggleSelected(),
                    "Net usage toggle is selected by default.");
            softAssert.assertTrue(isNetUsageToggleButtonVisible(),
                    "Net usage toggle button not visible.");
            ExtentLogger.logPass("Net usage toggle verified successfully.");
        }
        else {
            ExtentLogger.logSkip("No solar meter linked to the account.");
        }
        ExtentLogger.logPass("Bar Chart footer hyperlinks verified successfully.");
        ExtentLogger.logInfo("Verifying usage Disclaimer.");
        softAssert.assertEquals(getUsageDisclaimerLabel(),
                usageTextProp.getPropValue("lblUsageDisclaimer"),
                "Usage disclaimer not matched."
        );
        ExtentLogger.logPass("Usage disclaimer verified successfully.");
        ExtentLogger.logInfo("Verifying efficiency programs message on usage page.");
        softAssert.assertEquals(getEfficiencyProgramLabel(),
                usageTextProp.getPropValue("lblEnergyEfficiencyProgram"),
                "efficiency programs disclaimer not matched."
        );
        softAssert.assertTrue(isEfficiencyProgramClickHereLinkVisible(),
                "Click here link is not visible.");
        ExtentLogger.logPass("Efficiency programs message on usage page verified successfully.");
        ExtentLogger.logInfo("Bar chart section for " + interval + " interval verified successfully.");
    }

    /**
     * Verify water usage objects.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyWaterUsagesObjects(SoftAssert softAssert, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate water meters
        usageEndpoints.segregateWaterMeters(meters);
        waterMeters = UsageEndpoints.waterMeters.toArray(new Meter[0]);
        // Check whether having water meter or not
        if (waterMeters.length > 0) {
            ExtentLogger.logInfo("There are 1 or more water meter linked to the account.");
            // Verifying the water tab
            softAssert.assertTrue(isWaterTabLinkVisible(),
                    "Water tab is not visible.");
            clickWaterTabLink();
            homeSteps.waitForPageLoader();
            ExtentLogger.logInfo("Water meters are linked to the account.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verifying Monthly Interval Tab
            softAssert.assertTrue(isMeterDropDownVisible(),
                    "Meter drop-down is not visible for multiple meters.");
            softAssert.assertTrue(isMonthlyIntervalLinkVisible(),
                    "Monthly interval is not visible.");
            softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                    "Monthly interval is not active.");
            // Verifying the Units tabs
            softAssert.assertTrue(isMeasuringUnitLinkVisible(),
                    "Measuring unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkVisible(),
                    "Currency unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkActive(),
                    "Currency unit tab is not active.");
            // Verifying the period selection for the monthly interval
            softAssert.assertTrue(isCalendarLabelVisible(),
                    "Calendar label not visible");
            softAssert.assertTrue(getCalendarLabel().contains("Period: From"));
            softAssert.assertTrue(getCalendarLabel().contains("To"));
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify average this year tile.
                softAssert.assertEquals(
                        getAverageThisYearLabel(),
                        usageTextProp.getPropValue("lblAverageThisYear"),
                        "Average this year label not matched."
                );
                softAssert.assertTrue(isAverageThisYearValueVisible(),
                        "Average this year is not visible.");
                softAssert.assertTrue(getAverageThisYearValue().contains(currencyConfig),
                        "Average This Year currency config is not same as CSP Currency config.");
                // Verify highest this year tile.
                softAssert.assertEquals(
                        getHighestThisYearLabel(),
                        usageTextProp.getPropValue("lblHighestThisYear"),
                        "Highest this year label not matched."
                );
                softAssert.assertTrue(isHighestThisYearValueVisible(),
                        "Highest this year is not visible.");
                softAssert.assertTrue(getHighestThisYearValue().contains(currencyConfig),
                        "Highest this Year currency config is not same as CSP Currency config.");
                // Verify monthly water usage data for ALL meter scenario
                if (waterMeters.length > 1) {
                    ExtentLogger.logInfo("Number of water meters linked to the account {} " + waterMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(
                            getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < waterMeters.length; i++) {
                        if (waterMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    verifyWaterBarChartSection(softAssert, currencyConfig, "monthly");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        ExtentLogger.logInfo("Verifying so far this month tile.");
                        // Verify so far this month tile
                        softAssert.assertTrue(isSoFarThisMonthTileVisible(),
                                "So far this month tile not visible.");
                        softAssert.assertEquals(getSoFarThisLabelMonth(),
                                usageTextProp.getPropValue("lblSoFarThisMonth"),
                                "So far this month label not matched."
                        );
                        softAssert.assertTrue(getSoFarThisValueMonth().contains(currencyConfig),
                                "Currency config is not matching for so far this month.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        ExtentLogger.logInfo("Verifying projected usage tile.");
                        // Verify projected usage tile
                        softAssert.assertTrue(isProjectedUsageTileVisible(),
                                "Projected usage tile not visible.");
                        softAssert.assertEquals(getProjectedUsageLabelMonth(),
                                usageTextProp.getPropValue("lblProjectedUsage"),
                                "Projected usage label not matched."
                        );
                        softAssert.assertTrue(getProjectedUsageValue().contains(currencyConfig),
                                "Currency config is not matching for projected usage.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyWaterBarChartSection(softAssert, currencyConfig, "daily");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyWaterBarChartSection(softAssert, currencyConfig, "hourly");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // TODO Weather Overlay is not coming for 15 Minutes
                                /*softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");*/
                                verifyWaterBarChartSection(softAssert, currencyConfig, "intervals");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is visible for non AMI combo.");
                        softAssert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is visible for non AMI combo.");
                        softAssert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Minutes interval is visible for non AMI combo.");
                        ExtentLogger.logPass("Verifications for Non AMI combo is passed successfully.");
                    }
                    // Check for single meters
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    for (Meter meter : waterMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyWaterBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        ExtentLogger.logInfo("Verifying so far this month tile.");
                        // Verify so far this month tile
                        softAssert.assertTrue(isSoFarThisMonthTileVisible(),
                                "So far this month tile not visible.");
                        softAssert.assertEquals(getSoFarThisLabelMonth(),
                                usageTextProp.getPropValue("lblSoFarThisMonth"),
                                "So far this month label not matched."
                        );
                        softAssert.assertTrue(getSoFarThisValueMonth().contains(currencyConfig),
                                "Currency config is not matching for so far this month.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        ExtentLogger.logInfo("Verifying projected usage tile.");
                        // Verify projected usage tile
                        softAssert.assertTrue(isProjectedUsageTileVisible(),
                                "Projected usage tile not visible.");
                        softAssert.assertEquals(getProjectedUsageLabelMonth(),
                                usageTextProp.getPropValue("lblProjectedUsage"),
                                "Projected usage label not matched."
                        );
                        softAssert.assertTrue(getProjectedUsageValue().contains(currencyConfig),
                                "Currency config is not matching for projected usage.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyWaterBarChartSection(softAssert, currencyConfig, "daily");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyWaterBarChartSection(softAssert, currencyConfig, "hourly");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // TODO Weather Overlay is not coming for 15 Minutes
                                /*softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");*/
                                verifyWaterBarChartSection(softAssert, currencyConfig, "intervals");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyWaterBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is visible for non AMI combo.");
                        softAssert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is visible for non AMI combo.");
                        softAssert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Minutes interval is visible for non AMI combo.");
                    }
                }
                // Check if there is single meter linked to the account
                else if (waterMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (waterMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyWaterBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        ExtentLogger.logInfo("Verifying so far this month tile.");
                        // Verify so far this month tile
                        softAssert.assertTrue(isSoFarThisMonthTileVisible(),
                                "So far this month tile not visible.");
                        softAssert.assertEquals(getSoFarThisLabelMonth(),
                                usageTextProp.getPropValue("lblSoFarThisMonth"),
                                "So far this month label not matched."
                        );
                        softAssert.assertTrue(getSoFarThisValueMonth().contains(currencyConfig),
                                "Currency config is not matching for so far this month.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        ExtentLogger.logInfo("Verifying projected usage tile.");
                        // Verify projected usage tile
                        softAssert.assertTrue(isProjectedUsageTileVisible(),
                                "Projected usage tile not visible.");
                        softAssert.assertEquals(getProjectedUsageLabelMonth(),
                                usageTextProp.getPropValue("lblProjectedUsage"),
                                "Projected usage label not matched."
                        );
                        softAssert.assertTrue(getProjectedUsageValue().contains(currencyConfig),
                                "Currency config is not matching for projected usage.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyWaterBarChartSection(softAssert, currencyConfig, "daily");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyWaterBarChartSection(softAssert, currencyConfig, "hourly");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // TODO Weather Overlay is not coming for 15 Minutes
                                /*softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");*/
                                verifyWaterBarChartSection(softAssert, currencyConfig, "intervals");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (waterMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyWaterBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is visible for non AMI combo.");
                        softAssert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is visible for non AMI combo.");
                        softAssert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Minutes interval is visible for non AMI combo.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked water meter/meters.");
            }
        }
        // If there is no water meter linked
        else {
            ExtentLogger.logSkip("There is no Water meter linked to the account.");
        }
    }

    /**
     * Verify complete bar chart section for water meter as per the given interval.
     *
     * @param softAssert     to soft assert all the validations.
     * @param currencyConfig to verify the currency as per configurations.
     * @param interval       to verify the UI as per interval selection.
     */
    public void verifyWaterBarChartSection(SoftAssert softAssert, String currencyConfig, String interval) {
        ExtentLogger.logInfo("Verifying the water bar chart section for " + interval + " interval.");
        ExtentLogger.logInfo("Verifying the water usage Bar chart X axis and Y axis labels");
        // Verifying Y Axis
        softAssert.assertEquals(getYAxisLabel(),
                usageTextProp.getPropValue("lblYAxisUsage").replace("{$CurrencyOrUnit}",
                        currencyConfig),
                "Y Axis label not matched."
        );
        // Verifying X Axis
        List<String> xAxisLabels = getXAxisLabels();
        if (interval.equalsIgnoreCase("monthly")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "MMM yyyy"));
            }
        }
        else if (interval.equalsIgnoreCase("daily")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "MMM d, yyyy"));
            }
        }
        else if (interval.equalsIgnoreCase("hourly")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "HH:mm aa"));
            }
        }
        else if (interval.equalsIgnoreCase("minutes")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "HH:mm aa"));
            }
        }
        ExtentLogger.logPass("The Usage Bar chart X axis and Y axis labels verified successfully.");
        // Verifying Legends Labels and Colors
        ExtentLogger.logInfo("Verifying the Usage Bar chart legends label and colors");
        softAssert.assertEquals(
                getWaterLowUsageLabel(),
                usageTextProp.getPropValue("lblLowUsageLegend"),
                "Low usage label not matched."
        );
        softAssert.assertEquals(
                getLowUsageWaterLegColor(),
                usageTextProp.getPropValue("lowUsageLegendColor"),
                "Water Low usage legend color not matched."
        );
        softAssert.assertEquals(
                getWaterAllocationLabel(),
                usageTextProp.getPropValue("lblWaterAllocationLegend"),
                "Water allocation label not matched."
        );
        softAssert.assertEquals(
                getWaterAllocationLegendColor(),
                usageTextProp.getPropValue("waterAllocationLegendColor"),
                "Water allocation legend color not matched."
        );
        softAssert.assertEquals(
                getHighUsageLabel(),
                usageTextProp.getPropValue("lblHighUsageLegend"),
                "High usage label not matched."
        );
        softAssert.assertEquals(
                getHighUsageLegendColor(),
                usageTextProp.getPropValue("highUsageLegendColor"),
                "High usage legend color not matched."
        );
        ExtentLogger.logPass("Usage Bar chart legends label and colors verified successfully.");
        // Verify Bar Chart Footer HyperLinks
        ExtentLogger.logInfo("Verifying Bar Chart footer hyperlinks.");
        // Verify rates link
        softAssert.assertEquals(getRatesLinkLabel(),
                usageTextProp.getPropValue("lblRatesLink"),
                "Rates link label not matched."
        );
        softAssert.assertEquals(getRatesIconLabel(),
                currencyConfig,
                "Rates currency symbol not matched."
        );
        // Verify export usages link
        softAssert.assertEquals(getExportUsageLabel(),
                usageTextProp.getPropValue("lblExportUsagesLink"),
                "Export usages link label not matched."
        );
        // Verify set usage alert link
        softAssert.assertEquals(getSetUsageAlertsLabel(),
                usageTextProp.getPropValue("lblSetUsageAlertsLink"),
                "Set usage alerts link label not matched."
        );
        // Verify green button link
        softAssert.assertEquals(getGreenButtonLabel(),
                usageTextProp.getPropValue("lblGreenButton"),
                "Green button label not matched."
        );
        ExtentLogger.logPass("Bar Chart footer hyperlinks verified successfully.");
        ExtentLogger.logInfo("Verifying usage Disclaimer.");
        softAssert.assertEquals(getUsageDisclaimerLabel(),
                usageTextProp.getPropValue("lblWaterUsageDisclaimer"),
                "Water usage disclaimer not matched."
        );
        ExtentLogger.logPass("Usage disclaimer verified successfully.");
        ExtentLogger.logInfo("Verifying efficiency programs message on usage page.");
        softAssert.assertEquals(getEfficiencyProgramLabel(),
                usageTextProp.getPropValue("lblEnergyEfficiencyProgram"),
                "efficiency programs disclaimer not matched."
        );
        softAssert.assertTrue(isEfficiencyProgramClickHereLinkVisible(),
                "Click here link is not visible.");
        ExtentLogger.logPass("Efficiency programs message on usage page verified successfully.");
        ExtentLogger.logInfo("Water usage Bar chart section for " + interval + " interval verified successfully.");
    }

    /**
     * Verify gas usage objects.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyGasUsagesObjects(SoftAssert softAssert, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate gas meters
        usageEndpoints.segregateGasMeters(meters);
        gasMeters = UsageEndpoints.gasMeters.toArray(new Meter[0]);
        // Check whether having gas meter or not
        if (gasMeters.length > 0) {
            ExtentLogger.logInfo("There are 1 or more gas meter linked to the account.");
            // Verifying the gas tab
            softAssert.assertTrue(isGasTabLinkVisible(),
                    "Gas tab is not visible.");
            clickGasTabLink();
            homeSteps.waitForPageLoader();
            ExtentLogger.logInfo("Gas meters are linked to the account.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verifying Monthly interval Tab
            softAssert.assertTrue(isMeterDropDownVisible(),
                    "Meter drop-down is not visible for multiple meters.");
            softAssert.assertTrue(isMonthlyIntervalLinkVisible(),
                    "Monthly interval is not visible.");
            softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                    "Monthly interval is not active.");
            // Verifying the Units tabs
            softAssert.assertTrue(isMeasuringUnitLinkVisible(),
                    "Measuring unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkVisible(),
                    "Currency unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkActive(),
                    "Currency unit tab is not active.");
            // Verifying the period selection for the monthly interval
            softAssert.assertTrue(isCalendarLabelVisible(),
                    "Calendar label not visible");
            softAssert.assertTrue(getCalendarLabel().contains("Period: From"));
            softAssert.assertTrue(getCalendarLabel().contains("To"));
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify average this year tile.
                softAssert.assertEquals(getAverageThisYearLabel(),
                        usageTextProp.getPropValue("lblAverageThisYear"),
                        "Average this year label not matched."
                );
                softAssert.assertTrue(isAverageThisYearValueVisible(),
                        "Average this year is not visible.");
                softAssert.assertTrue(getAverageThisYearValue().contains(currencyConfig),
                        "Average This Year currency config is not same as CSP Currency config.");
                // Verify highest this year tile.
                softAssert.assertEquals(getHighestThisYearLabel(),
                        usageTextProp.getPropValue("lblHighestThisYear"),
                        "Highest this year label not matched."
                );
                softAssert.assertTrue(isHighestThisYearValueVisible(),
                        "Highest this year is not visible.");
                softAssert.assertTrue(getHighestThisYearValue().contains(currencyConfig),
                        "Highest this Year currency config is not same as CSP Currency config.");
                // Verify monthly gas usage data for ALL meter scenario
                if (gasMeters.length > 1) {
                    ExtentLogger.logInfo("Number of gas meters linked to the account {} " + gasMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < gasMeters.length; i++) {
                        if (gasMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    verifyGasBarChartSection(softAssert, currencyConfig, "monthly");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        ExtentLogger.logInfo("Verifying so far this month tile.");
                        // Verify so far this month tile
                        softAssert.assertTrue(isSoFarThisMonthTileVisible(),
                                "So far this month tile not visible.");
                        softAssert.assertEquals(getSoFarThisLabelMonth(),
                                usageTextProp.getPropValue("lblSoFarThisMonth"),
                                "So far this month label not matched."
                        );
                        softAssert.assertTrue(getSoFarThisValueMonth().contains(currencyConfig),
                                "Currency config is not matching for so far this month.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        ExtentLogger.logInfo("Verifying projected usage tile.");
                        // Verify projected usage tile
                        softAssert.assertTrue(isProjectedUsageTileVisible(),
                                "Projected usage tile not visible.");
                        softAssert.assertEquals(getProjectedUsageLabelMonth(),
                                usageTextProp.getPropValue("lblProjectedUsage"),
                                "Projected usage label not matched."
                        );
                        softAssert.assertTrue(getProjectedUsageValue().contains(currencyConfig),
                                "Currency config is not matching for projected usage.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyGasBarChartSection(softAssert, currencyConfig, "daily");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyGasBarChartSection(softAssert, currencyConfig, "hourly");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // TODO Weather Overlay is not coming for 15 Minutes
                                /*softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");*/
                                verifyGasBarChartSection(softAssert, currencyConfig, "intervals");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is visible for non AMI combo.");
                        softAssert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is visible for non AMI combo.");
                        softAssert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Minutes interval is visible for non AMI combo.");
                        ExtentLogger.logPass("Verifications for Non AMI combo is passed successfully.");
                    }
                    // Check for single meters
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    for (Meter meter : gasMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyGasBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        ExtentLogger.logInfo("Verifying so far this month tile.");
                        // Verify so far this month tile
                        softAssert.assertTrue(isSoFarThisMonthTileVisible(),
                                "So far this month tile not visible.");
                        softAssert.assertEquals(getSoFarThisLabelMonth(),
                                usageTextProp.getPropValue("lblSoFarThisMonth"),
                                "So far this month label not matched."
                        );
                        softAssert.assertTrue(getSoFarThisValueMonth().contains(currencyConfig),
                                "Currency config is not matching for so far this month.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        ExtentLogger.logInfo("Verifying projected usage tile.");
                        // Verify projected usage tile
                        softAssert.assertTrue(isProjectedUsageTileVisible(),
                                "Projected usage tile not visible.");
                        softAssert.assertEquals(getProjectedUsageLabelMonth(),
                                usageTextProp.getPropValue("lblProjectedUsage"),
                                "Projected usage label not matched."
                        );
                        softAssert.assertTrue(getProjectedUsageValue().contains(currencyConfig),
                                "Currency config is not matching for projected usage.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyGasBarChartSection(softAssert, currencyConfig, "daily");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyGasBarChartSection(softAssert, currencyConfig, "hourly");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // TODO Weather Overlay is not coming for 15 Minutes
                                /*softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");*/
                                verifyGasBarChartSection(softAssert, currencyConfig, "intervals");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyGasBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is visible for non AMI combo.");
                        softAssert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is visible for non AMI combo.");
                        softAssert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Minutes interval is visible for non AMI combo.");
                    }
                }
                // Check if there is single meter linked to the account
                else if (gasMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (gasMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyGasBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        ExtentLogger.logInfo("Verifying so far this month tile.");
                        // Verify so far this month tile
                        softAssert.assertTrue(isSoFarThisMonthTileVisible(),
                                "So far this month tile not visible.");
                        softAssert.assertEquals(getSoFarThisLabelMonth(),
                                usageTextProp.getPropValue("lblSoFarThisMonth"),
                                "So far this month label not matched."
                        );
                        softAssert.assertTrue(getSoFarThisValueMonth().contains(currencyConfig),
                                "Currency config is not matching for so far this month.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        ExtentLogger.logInfo("Verifying projected usage tile.");
                        // Verify projected usage tile
                        softAssert.assertTrue(isProjectedUsageTileVisible(),
                                "Projected usage tile not visible.");
                        softAssert.assertEquals(getProjectedUsageLabelMonth(),
                                usageTextProp.getPropValue("lblProjectedUsage"),
                                "Projected usage label not matched."
                        );
                        softAssert.assertTrue(getProjectedUsageValue().contains(currencyConfig),
                                "Currency config is not matching for projected usage.");
                        ExtentLogger.logPass("Verified so far this month tile successfully.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyGasBarChartSection(softAssert, currencyConfig, "daily");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");
                                verifyGasBarChartSection(softAssert, currencyConfig, "hourly");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // TODO Weather Overlay is not coming for 15 Minutes
                                /*softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle is not visible.");
                                softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                        usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                        "Weather overlay toggle label not matched.");*/
                                verifyGasBarChartSection(softAssert, currencyConfig, "intervals");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (gasMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyGasBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is visible for non AMI combo.");
                        softAssert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is visible for non AMI combo.");
                        softAssert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Minutes interval is visible for non AMI combo.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked gas meter/meters.");
            }
        }
        // If there is no gas meter linked
        else {
            ExtentLogger.logSkip("There is no Gas meter linked to the account.");
        }
    }

    /**
     * Verify complete bar chart section for gas meter as per the given interval.
     *
     * @param softAssert     to soft assert all the validations.
     * @param currencyConfig to verify the currency as per configurations.
     * @param interval       to verify the UI as per interval selection.
     */
    public void verifyGasBarChartSection(SoftAssert softAssert, String currencyConfig, String interval) {
        ExtentLogger.logInfo("Verifying the gas bar chart section for " + interval + " interval.");
        ExtentLogger.logInfo("Verifying the gas usage Bar chart X axis and Y axis labels");
        // Verifying Y Axis
        softAssert.assertEquals(getYAxisLabel(),
                usageTextProp.getPropValue("lblYAxisUsage").replace("{$CurrencyOrUnit}",
                        currencyConfig),
                "Y Axis label not matched."
        );
        // Verifying X Axis
        List<String> xAxisLabels = getXAxisLabels();
        if (interval.equalsIgnoreCase("monthly")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "MMM yyyy"));
            }
        }
        else if (interval.equalsIgnoreCase("daily")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "MMM d, yyyy"));
            }
        }
        else if (interval.equalsIgnoreCase("hourly")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "HH:mm aa"));
            }
        }
        else if (interval.equalsIgnoreCase("minutes")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "HH:mm aa"));
            }
        }
        ExtentLogger.logPass("The Usage Bar chart X axis and Y axis labels verified successfully.");
        // Verifying Legends labels and colors
        ExtentLogger.logInfo("Verifying the Usage Bar chart legends label and colors");
        softAssert.assertEquals(getElectricLowUsageLabel(),
                usageTextProp.getPropValue("lblLowUsageLegend"),
                "Low usage label not matched."
        );
        softAssert.assertEquals(getLowUsageLegendColor(),
                usageTextProp.getPropValue("lowUsageLegendColor"),
                "Low usage legend color not matched."
        );
        softAssert.assertEquals(getAverageUsageLabel(),
                usageTextProp.getPropValue("lblAverageUsageLegend"),
                "Gas usage label not matched."
        );
        softAssert.assertEquals(getAverageUsageLegendColor(),
                usageTextProp.getPropValue("avgUsageLegendColor"),
                "Gas usage legend color not matched."
        );
        softAssert.assertEquals(getHighUsageLabel(),
                usageTextProp.getPropValue("lblHighUsageLegend"),
                "High usage label not matched."
        );
        softAssert.assertEquals(getHighUsageLegendColor(),
                usageTextProp.getPropValue("highUsageLegendColor"),
                "High usage legend color not matched."
        );
        ExtentLogger.logPass("Usage Bar chart legends label and colors verified successfully.");
        // Verify Bar Chart Footer HyperLinks
        ExtentLogger.logInfo("Verifying Bar Chart footer hyperlinks.");
        // Verify rates link
        softAssert.assertEquals(getRatesLinkLabel(),
                usageTextProp.getPropValue("lblRatesLink"),
                "Rates link label not matched."
        );
        softAssert.assertEquals(getRatesIconLabel(),
                currencyConfig,
                "Rates currency symbol not matched."
        );
        // Verify export usages link
        softAssert.assertEquals(getExportUsageLabel(),
                usageTextProp.getPropValue("lblExportUsagesLink"),
                "Export usages link label not matched."
        );
        // Verify set usage alert link
        softAssert.assertEquals(getSetUsageAlertsLabel(),
                usageTextProp.getPropValue("lblSetUsageAlertsLink"),
                "Set usage alerts link label not matched."
        );
        // Verify green button link
        softAssert.assertEquals(getGreenButtonLabel(),
                usageTextProp.getPropValue("lblGreenButton"),
                "Green button label not matched."
        );
        ExtentLogger.logPass("Bar Chart footer hyperlinks verified successfully.");
        ExtentLogger.logInfo("Verifying usage Disclaimer.");
        softAssert.assertEquals(getUsageDisclaimerLabel(),
                usageTextProp.getPropValue("lblUsageDisclaimer"),
                "Usage disclaimer not matched."
        );
        ExtentLogger.logPass("Usage disclaimer verified successfully.");
        ExtentLogger.logInfo("Verifying efficiency programs message on usage page.");
        softAssert.assertEquals(getEfficiencyProgramLabel(),
                usageTextProp.getPropValue("lblEnergyEfficiencyProgram"),
                "efficiency programs disclaimer not matched."
        );
        softAssert.assertTrue(isEfficiencyProgramClickHereLinkVisible(),
                "Click here link is not visible.");
        ExtentLogger.logPass("Efficiency programs message on usage page verified successfully.");
        ExtentLogger.logInfo("Gas usage Bar chart section for " + interval + " interval verified successfully.");
    }

    /**
     * Verify solar usage objects.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifySolarUsagesObjects(SoftAssert softAssert, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate solar meters
        usageEndpoints.segregateSolarMeters(meters);
        solarMeters = UsageEndpoints.solarMeters.toArray(new Meter[0]);
        // Check whether having solar meter or not
        if (solarMeters.length > 0) {
            ExtentLogger.logInfo("There are 1 or more solar meter linked to the account.");
            // Verifying the solar tab
            softAssert.assertTrue(isSolarTabLinkVisible(),
                    "Solar tab is not visible.");
            clickSolarTabLink();
            homeSteps.waitForPageLoader();
            ExtentLogger.logInfo("Solar meters are linked to the account.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verifying Monthly interval Tab
            softAssert.assertTrue(isMeterDropDownVisible(),
                    "Meter drop-down is not visible for multiple meters.");
            // Verifying the Units tabs
            softAssert.assertTrue(isMeasuringUnitLinkVisible(),
                    "Measuring unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkVisible(),
                    "Currency unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkActive(),
                    "Currency unit tab is not active.");
            // Verifying the period selection for the monthly interval
            softAssert.assertTrue(isCalendarLabelVisible(),
                    "Calendar label not visible");
            softAssert.assertTrue(getCalendarLabel().contains("Period: From"));
            softAssert.assertTrue(getCalendarLabel().contains("To"));
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify highest in 30 days tile.
                softAssert.assertEquals(getHighestIn30DaysLabel(),
                        usageTextProp.getPropValue("lblHighestIn30Days"),
                        "Highest in 30 days label not matched."
                );
                softAssert.assertTrue(isHighestIn30DaysValueVisible(),
                        "Highest in 30 days is not visible.");
                softAssert.assertTrue(getHighestIn30DaysValue().contains(currencyConfig),
                        "Highest in 30 days currency config is not same as CSP Currency config.");
                // Verify projected generation tile.
                softAssert.assertEquals(getProjectedGenerationLabel(),
                        usageTextProp.getPropValue("lblProjectedGeneration"),
                        "Projected generation label not matched."
                );
                softAssert.assertTrue(isProjectedGenerationValueVisible(),
                        "Projected generation is not visible.");
                softAssert.assertTrue(getProjectedGenerationValue().contains(currencyConfig),
                        "Projected generation currency config is not same as CSP Currency config.");
                // Verify monthly solar usage data for ALL meter scenario
                if (solarMeters.length > 1) {
                    ExtentLogger.logInfo("Number of solar meters linked to the account {} " + solarMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Verify no data present label visibility
                    isDataNotAvailable = isDataNotAvailableLabelVisible();
                    if (!isDataNotAvailable) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                "Weather overlay toggle is not visible.");
                        softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                "Weather overlay toggle label not matched.");
                        verifySolarBarChartSection(softAssert, currencyConfig, "daily");
                    }
                    else {
                        softAssert.assertEquals(getDataNotAvailableLabel(),
                                usageTextProp.getPropValue("lblNoGenerationDataPresent"),
                                "No generation data label not matched."
                        );
                    }
                    // Check for single meters
                    String amiMeter = null;
                    for (Meter meter : solarMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                    }
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        isDataNotAvailable = isDataNotAvailableLabelVisible();
                        if (!isDataNotAvailable) {
                            // Verifying for daily intervals
                            softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                    "Weather overlay toggle is not visible.");
                            softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                    usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                    "Weather overlay toggle label not matched.");
                            verifySolarBarChartSection(softAssert, currencyConfig, "daily");
                        }
                        else {
                            softAssert.assertEquals(getDataNotAvailableLabel(),
                                    usageTextProp.getPropValue("lblNoGenerationDataPresent"),
                                    "No generation data label not matched."
                            );
                        }
                    }
                }
                // Check if there is single meter linked to the account
                else if (solarMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (solarMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        isDataNotAvailable = isDataNotAvailableLabelVisible();
                        if (!isDataNotAvailable) {
                            // Verifying for daily intervals
                            softAssert.assertTrue(isWeatherOverlayToggleVisible(),
                                    "Weather overlay toggle is not visible.");
                            softAssert.assertEquals(getWeatherOverlayToggleLabel(),
                                    usageTextProp.getPropValue("lblWeatherOverlayToggle"),
                                    "Weather overlay toggle label not matched.");
                            verifySolarBarChartSection(softAssert, currencyConfig, "daily");
                        }
                        else {
                            softAssert.assertEquals(getDataNotAvailableLabel(),
                                    usageTextProp.getPropValue("lblNoGenerationDataPresent"),
                                    "No generation data label not matched."
                            );
                        }
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoGenerationDataPresent"),
                        "No generation data label not matched."
                );
                softAssert.assertFalse(isHighestIn30DaysValueVisible(),
                        "Highest in 30 days is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedGenerationValueVisible(),
                        "Projected generation tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked gas meter/meters.");
            }
        }
        // If there is no solar meter linked
        else {
            ExtentLogger.logSkip("There is no Solar meter linked to the account.");
        }
    }

    /**
     * Verify complete bar chart section for solar meter as per the given interval.
     *
     * @param softAssert     to soft assert all the validations.
     * @param currencyConfig to verify the currency as per configurations.
     * @param interval       to verify the UI as per interval selection.
     */
    public void verifySolarBarChartSection(SoftAssert softAssert, String currencyConfig, String interval) {
        ExtentLogger.logInfo("Verifying the solar generation bar chart section.");
        ExtentLogger.logInfo("Verifying the solar generation bar chart X axis and Y axis labels");
        // Verifying Y Axis
        softAssert.assertEquals(getYAxisLabel(),
                usageTextProp.getPropValue("lblYAxisGeneration").replace("{$CurrencyOrUnit}",
                        currencyConfig),
                "Y Axis label not matched."
        );
        // Verifying X Axis
        List<String> xAxisLabels = getXAxisLabels();
        if (interval.equalsIgnoreCase("monthly")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "MMM yyyy"));
            }
        }
        else if (interval.equalsIgnoreCase("daily")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "MMM d, yyyy"));
            }
        }
        else if (interval.equalsIgnoreCase("hourly")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "HH:mm aa"));
            }
        }
        else if (interval.equalsIgnoreCase("minutes")) {
            for (String month : xAxisLabels) {
                month = month.trim();
                //softAssert.assertTrue(DateUtil.isValidDateInFormat(month, "HH:mm aa"));
            }
        }
        ExtentLogger.logPass("The Generation Bar chart X axis and Y axis labels verified successfully.");
        // Verifying Legends labels and colors
        ExtentLogger.logInfo("Verifying the Generation Bar chart legends label and colors");
        softAssert.assertEquals(getGenerationLegendLabel(),
                usageTextProp.getPropValue("lblGenerationLegend"),
                "Generation legend label not matched."
        );
        softAssert.assertEquals(getGenerationLegendColor(),
                usageTextProp.getPropValue("generationLegendColor"),
                "Generation legend color not matched."
        );
        ExtentLogger.logPass("Generation Bar chart legends label and colors verified successfully.");
        ExtentLogger.logInfo("Verifying usage Disclaimer.");
        softAssert.assertEquals(getUsageDisclaimerLabel(),
                usageTextProp.getPropValue("lblGenerationDisclaimer"),
                "Generation disclaimer not matched."
        );
        ExtentLogger.logPass("Generation disclaimer verified successfully.");
        ExtentLogger.logInfo("Verifying efficiency programs message on usage page.");
        softAssert.assertEquals(getEfficiencyProgramLabel(),
                usageTextProp.getPropValue("lblEnergyEfficiencyProgram"),
                "efficiency programs disclaimer not matched."
        );
        softAssert.assertTrue(isEfficiencyProgramClickHereLinkVisible(),
                "Click here link is not visible.");
        ExtentLogger.logPass("Efficiency programs message on usage page verified successfully.");
        ExtentLogger.logPass("Solar generation bar chart section verified successfully.");
    }

    /**
     * Verify electric usage data for monthly intervals.
     *
     * @param softAssert to soft assert all the validations.
     * @param user       user model to hit the API with user details
     * @param meters     meter array model linked to the account.
     */
    public void verifyMonthlyElectricUsageData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init from and to date config
        Map<String, String> fromToDateConfig;
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Init periodicity
        periodicity = Intervals.MO.name();
        // Segregate electric meters
        usageEndpoints.segregateElectricMeters(meters);
        electricMeters = UsageEndpoints.electricMeters.toArray(new Meter[0]);
        // Check whether having electric meter or not
        if (electricMeters.length > 0) {
            ExtentLogger.logInfo("Electric meters are linked to the account.");
            // Verify electric tab should visible and selected by default
            Assert.assertTrue(isElectricTabVisible(),
                    "Electric tab is not visible.");
            Assert.assertTrue(isElectricTabActive(),
                    "Electric tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly electric usage data for ALL meter scenario
                if (electricMeters.length > 1) {
                    ExtentLogger.logInfo("Number of electric meters linked to the account {} " + electricMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < electricMeters.length; i++) {
                        if (electricMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    Assert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                periodicity
                        );
                        // Getting the daily electric usage
                        log.info("Get the Monthly electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Data verifications for Non AMI combo is passed successfully for Monthly interval.");
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // If collection is non AMI
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, false);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                periodicity
                        );
                        // Getting the daily electric usage
                        log.info("Get the Monthly electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Data verifications for Non AMI combo is passed successfully for Monthly interval.");
                    }
                    // Check for single meter as well in Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    // Init AMI and Non-AMI meters
                    for (Meter meter : electricMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter is present amongst Multi-Meter
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Click currency tab
                        clickCurrencyUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = amiMeter;
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                periodicity
                        );
                        // Getting the daily electric usage
                        log.info("Get the Monthly electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                    // If Non AMI meter is present amongst Multi-Meter
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Click currency tab
                        clickCurrencyUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // If collection is non AMI
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, false);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = nonAmiMeter;
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                periodicity
                        );
                        // Getting the daily electric usage
                        log.info("Get the Monthly electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
                // If there is only one meter linked to the account
                else if (electricMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (electricMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = electricMeters[0].getMeterNumber();
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                periodicity
                        );
                        // Getting the daily electric usage
                        log.info("Get the Monthly electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                    // Check if the single meter linked is Non AMI
                    else if (electricMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // If collection is non AMI
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, false);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = electricMeters[0].getMeterNumber();
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                periodicity
                        );
                        // Getting the daily electric usage
                        log.info("Get the Monthly electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked electric meter/meters.");
            }
        }
        // If there is no electric meter linked
        else {
            ExtentLogger.logSkip("There is no Electric meter linked to the account.");
        }
    }

    /**
     * Verify electric usage data for daily intervals.
     *
     * @param softAssert to soft assert all the validations.
     * @param user       user model to hit the API with user details
     * @param meters     meter array model linked to the account.
     */
    public void verifyDailyElectricUsageData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init from and to date config
        Map<String, String> fromToDateConfig;
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Init periodicity
        periodicity = Intervals.DA.name();
        // Segregate electric meters
        usageEndpoints.segregateElectricMeters(meters);
        electricMeters = UsageEndpoints.electricMeters.toArray(new Meter[0]);
        // Check whether having electric meter or not
        if (electricMeters.length > 0) {
            ExtentLogger.logInfo("Electric meters are linked to the account.");
            // Verify electric tab should visible and selected by default
            Assert.assertTrue(isElectricTabVisible(),
                    "Electric tab is not visible.");
            Assert.assertTrue(isElectricTabActive(),
                    "Electric tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly electric usage data for ALL meter scenario
                if (electricMeters.length > 1) {
                    ExtentLogger.logInfo("Number of electric meters linked to the account {} " + electricMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < electricMeters.length; i++) {
                        if (electricMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    Assert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        Assert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isDailyIntervalLinkActive(),
                                "Daily interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                periodicity
                        );
                        // Getting the daily electric usage
                        log.info("Get the Monthly electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadDate().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd",
                                    "MMM d,yyyy");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Data verifications for Non AMI combo is passed successfully for Monthly interval.");
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // If collection is non AMI
                        Assert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is still visible for Non AMI combo.");
                    }
                    // Check for single meter as well in Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    // Init AMI and Non-AMI meters
                    for (Meter meter : electricMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter is present amongst Multi-Meter
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verify daily tab
                        Assert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isDailyIntervalLinkActive(),
                                "Daily interval is not active after clicked.");
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = amiMeter;
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                periodicity
                        );
                        // Getting the daily electric usage
                        log.info("Get the daily electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadDate().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd",
                                    "MMM d,yyyy");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                    // If Non AMI meter is present amongst Multi-Meter
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
                // If there is only one meter linked to the account
                else if (electricMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (electricMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verify daily tab
                        Assert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isDailyIntervalLinkActive(),
                                "Daily interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = electricMeters[0].getMeterNumber();
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                periodicity
                        );
                        // Getting the daily electric usage
                        log.info("Get the daily electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadDate().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd",
                                    "MMM d,yyyy");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                    // Check if the single meter linked is Non AMI
                    else if (electricMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        Assert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked electric meter/meters.");
            }
        }
        // If there is no electric meter linked
        else {
            ExtentLogger.logSkip("There is no Electric meter linked to the account.");
        }
    }

    /**
     * Verify electric usage data for hourly intervals.
     *
     * @param softAssert to soft assert all the validations.
     * @param user       user model to hit the API with user details
     * @param meters     meter array model linked to the account.
     */
    public void verifyHourlyElectricUsageData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init from and to date config
        Map<String, String> fromToDateConfig;
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Init periodicity
        periodicity = Intervals.HH.name();
        // Segregate electric meters
        usageEndpoints.segregateElectricMeters(meters);
        electricMeters = UsageEndpoints.electricMeters.toArray(new Meter[0]);
        // Check whether having electric meter or not
        if (electricMeters.length > 0) {
            ExtentLogger.logInfo("Electric meters are linked to the account.");
            // Verify electric tab should visible and selected by default
            Assert.assertTrue(isElectricTabVisible(),
                    "Electric tab is not visible.");
            Assert.assertTrue(isElectricTabActive(),
                    "Electric tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly electric usage data for ALL meter scenario
                if (electricMeters.length > 1) {
                    ExtentLogger.logInfo("Number of electric meters linked to the account {} " + electricMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < electricMeters.length; i++) {
                        if (electricMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    Assert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying Hourly Interval
                        Assert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isHourlyIntervalLinkActive(),
                                "Hourly interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily electric usage
                        log.info("Get the Daily electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = "All";
                            log.info("Initializing the get Electric Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.kWh.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly electric usage
                            log.info("Get the hourly electric data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getHourlyElectricData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a");
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // If collection is non AMI
                        Assert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is still visible for Non AMI combo.");
                    }
                    // Check for single meter as well in Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    // Init AMI and Non-AMI meters
                    for (Meter meter : electricMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter is present amongst Multi-Meter
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying Hourly Interval
                        Assert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isHourlyIntervalLinkActive(),
                                "Hourly interval is not active after clicked.");
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = amiMeter;
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily electric usage
                        log.info("Get the Daily electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = amiMeter;
                            log.info("Initializing the get Electric Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.kWh.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly electric usage
                            log.info("Get the hourly electric data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getHourlyElectricData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a");
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // If Non AMI meter is present amongst Multi-Meter
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        softAssert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
                // If there is only one meter linked to the account
                else if (electricMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (electricMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying Hourly Interval
                        Assert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isHourlyIntervalLinkActive(),
                                "Hourly interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = electricMeters[0].getMeterNumber();
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily electric usage
                        log.info("Get the Daily electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = electricMeters[0].getMeterNumber();
                            log.info("Initializing the get Electric Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.kWh.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly electric usage
                            log.info("Get the hourly electric data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getHourlyElectricData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a");
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (electricMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        Assert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked electric meter/meters.");
            }
        }
        // If there is no electric meter linked
        else {
            ExtentLogger.logSkip("There is no Electric meter linked to the account.");
        }
    }

    /**
     * Verify electric usage data for minutes intervals.
     *
     * @param softAssert to soft assert all the validations.
     * @param user       user model to hit the API with user details
     * @param meters     meter array model linked to the account.
     */
    public void verifyMinutesElectricUsageData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init from and to date config
        Map<String, String> fromToDateConfig;
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Init periodicity
        periodicity = Intervals.IN.name();
        // Segregate electric meters
        usageEndpoints.segregateElectricMeters(meters);
        electricMeters = UsageEndpoints.electricMeters.toArray(new Meter[0]);
        // Check whether having electric meter or not
        if (electricMeters.length > 0) {
            ExtentLogger.logInfo("Electric meters are linked to the account.");
            // Verify electric tab should visible and selected by default
            Assert.assertTrue(isElectricTabVisible(),
                    "Electric tab is not visible.");
            Assert.assertTrue(isElectricTabActive(),
                    "Electric tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly electric usage data for ALL meter scenario
                if (electricMeters.length > 1) {
                    ExtentLogger.logInfo("Number of electric meters linked to the account {} " + electricMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < electricMeters.length; i++) {
                        if (electricMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    Assert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying Minutes Interval
                        Assert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isMinutesIntervalLinkActive(),
                                "Minutes interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily electric usage
                        log.info("Get the Daily electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = "All";
                            log.info("Initializing the get Electric Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.kWh.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly electric usage
                            log.info("Get the hourly electric data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getMinutesElectricData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a");
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // If collection is non AMI
                        Assert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Minutes interval is still visible for Non AMI combo.");
                    }
                    // Check for single meter as well in Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    // Init AMI and Non-AMI meters
                    for (Meter meter : electricMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter is present amongst Multi-Meter
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying Minutes Interval
                        Assert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isMinutesIntervalLinkActive(),
                                "Minutes interval is not active after clicked.");
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily electric usage
                        log.info("Get the Daily electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = "All";
                            log.info("Initializing the get Electric Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.kWh.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly electric usage
                            log.info("Get the hourly electric data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getHourlyElectricData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a");
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // If Non AMI meter is present amongst Multi-Meter
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        softAssert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Hourly interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
                // If there is only one meter linked to the account
                else if (electricMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (electricMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying Minutes Interval
                        Assert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isMinutesIntervalLinkActive(),
                                "Minutes interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get Electric Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily electric usage
                        log.info("Get the Daily electric data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyElectricData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = "All";
                            log.info("Initializing the get Electric Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.kWh.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly electric usage
                            log.info("Get the hourly electric data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getHourlyElectricData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a");
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (electricMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        Assert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Hourly interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked electric meter/meters.");
            }
        }
        // If there is no electric meter linked
        else {
            ExtentLogger.logSkip("There is no Electric meter linked to the account.");
        }
    }

    /**
     * Verify water usage data for monthly intervals.
     *
     * @param softAssert to soft assert all the validations.
     * @param user       user model to hit the API with user details
     * @param meters     meter array model linked to the account.
     */
    public void verifyMonthlyWaterUsageData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init from and to date config
        Map<String, String> fromToDateConfig;
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Init periodicity
        periodicity = Intervals.MO.name();
        // Segregate water meters
        usageEndpoints.segregateWaterMeters(meters);
        waterMeters = UsageEndpoints.waterMeters.toArray(new Meter[0]);
        // Check whether having water meter or not
        if (waterMeters.length > 0) {
            ExtentLogger.logInfo("Water meters are linked to the account.");
            ExtentLogger.logInfo("Number of water meters linked to the account {} " + waterMeters.length);
            // Verify water tab should visible and selected by default
            Assert.assertTrue(isWaterTabVisible(),
                    "Water tab is not visible.");
            clickWaterTabLink();
            pause(1000);
            homeSteps.waitForPageLoader();
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly water usage data for ALL meter scenario
                if (waterMeters.length > 1) {
                    Assert.assertTrue(isWaterTabActive(),
                            "Water tab is not active by default.");
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < waterMeters.length; i++) {
                        if (waterMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    Assert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                periodicity
                        );
                        // Getting the daily water usage
                        log.info("Get the Monthly water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Data verifications for Non AMI combo is passed successfully for Monthly interval.");
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // If collection is non AMI
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, false);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get Water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                periodicity
                        );
                        // Getting the daily water usage
                        log.info("Get the Monthly water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Data verifications for Non AMI combo is passed successfully for Monthly interval.");
                    }
                    // Check for single meter as well in Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    // Init AMI and Non-AMI meters
                    for (Meter meter : waterMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter is present amongst Multi-Meter
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Click currency tab
                        clickCurrencyUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = amiMeter;
                        log.info("Initializing the get Water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                periodicity
                        );
                        // Getting the daily water usage
                        log.info("Get the Monthly water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                    // If Non AMI meter is present amongst Multi-Meter
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Click currency tab
                        clickCurrencyUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // If collection is non AMI
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, false);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = nonAmiMeter;
                        log.info("Initializing the get Water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                periodicity
                        );
                        // Getting the daily water usage
                        log.info("Get the Monthly water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
                // If there is only one meter linked to the account
                else if (waterMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (waterMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = waterMeters[0].getMeterNumber();
                        log.info("Initializing the get water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                periodicity
                        );
                        // Getting the daily water usage
                        log.info("Get the Monthly water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                    // Check if the single meter linked is Non AMI
                    else if (waterMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // If collection is non AMI
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, false);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = waterMeters[0].getMeterNumber();
                        log.info("Initializing the get Water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                periodicity
                        );
                        // Getting the daily water usage
                        log.info("Get the Monthly water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked water meter/meters.");
            }
        }
        // If there is no water meter linked
        else {
            ExtentLogger.logSkip("There is no water meter linked to the account.");
        }
    }

    /**
     * Verify water usage data for daily intervals.
     *
     * @param softAssert to soft assert all the validations.
     * @param user       user model to hit the API with user details
     * @param meters     meter array model linked to the account.
     */
    public void verifyDailyWaterUsageData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init from and to date config
        Map<String, String> fromToDateConfig;
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Init periodicity
        periodicity = Intervals.DA.name();
        // Segregate water meters
        usageEndpoints.segregateWaterMeters(meters);
        waterMeters = UsageEndpoints.waterMeters.toArray(new Meter[0]);
        // Check whether having water meter or not
        if (waterMeters.length > 0) {
            ExtentLogger.logInfo("Water meters are linked to the account.");
            // Verify water tab should visible and selected by default
            Assert.assertTrue(isWaterTabVisible(),
                    "Water tab is not visible.");
            clickWaterTabLink();
            pause(1000);
            homeSteps.waitForPageLoader();
            Assert.assertTrue(isWaterTabActive(),
                    "Water tab is not active.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly water usage data for ALL meter scenario
                if (waterMeters.length > 1) {
                    ExtentLogger.logInfo("Number of water meters linked to the account {} " + waterMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < waterMeters.length; i++) {
                        if (waterMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    Assert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        Assert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isDailyIntervalLinkActive(),
                                "Daily interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                periodicity
                        );
                        // Getting the daily water usage
                        log.info("Get the Monthly water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadDate().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd",
                                    "MMM d,yyyy");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Data verifications for Non AMI combo is passed successfully for Monthly interval.");
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // If collection is non AMI
                        Assert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is still visible for Non AMI combo.");
                    }
                    // Check for single meter as well in Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    // Init AMI and Non-AMI meters
                    for (Meter meter : waterMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter is present amongst Multi-Meter
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verify daily tab
                        Assert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isDailyIntervalLinkActive(),
                                "Daily interval is not active after clicked.");
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = amiMeter;
                        log.info("Initializing the get water usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                periodicity
                        );
                        // Getting the daily water usage
                        log.info("Get the daily water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadDate().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd",
                                    "MMM d,yyyy");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                    // If Non AMI meter is present amongst Multi-Meter
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
                // If there is only one meter linked to the account
                else if (waterMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (waterMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verify daily tab
                        Assert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isDailyIntervalLinkActive(),
                                "Daily interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = waterMeters[0].getMeterNumber();
                        log.info("Initializing the get water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                periodicity
                        );
                        // Getting the daily water usage
                        log.info("Get the daily water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadDate().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd",
                                    "MMM d,yyyy");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                    // Check if the single meter linked is Non AMI
                    else if (waterMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        Assert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked water meter/meters.");
            }
        }
        // If there is no water meter linked
        else {
            ExtentLogger.logSkip("There is no water meter linked to the account.");
        }
    }

    /**
     * Verify water usage data for hourly intervals.
     *
     * @param softAssert to soft assert all the validations.
     * @param user       user model to hit the API with user details
     * @param meters     meter array model linked to the account.
     */
    public void verifyHourlyWaterUsageData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init from and to date config
        Map<String, String> fromToDateConfig;
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Init periodicity
        periodicity = Intervals.HH.name();
        // Segregate water meters
        usageEndpoints.segregateWaterMeters(meters);
        waterMeters = UsageEndpoints.waterMeters.toArray(new Meter[0]);
        // Check whether having water meter or not
        if (waterMeters.length > 0) {
            ExtentLogger.logInfo("Water meters are linked to the account.");
            // Verify water tab should visible and selected by default
            Assert.assertTrue(isWaterTabVisible(),
                    "Water tab is not visible.");
            clickWaterTabLink();
            pause(1000);
            homeSteps.waitForPageLoader();
            Assert.assertTrue(isWaterTabActive(),
                    "Water tab is not active.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly water usage data for ALL meter scenario
                if (waterMeters.length > 1) {
                    ExtentLogger.logInfo("Number of water meters linked to the account {} " + waterMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < waterMeters.length; i++) {
                        if (waterMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    Assert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying Hourly Interval
                        Assert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isHourlyIntervalLinkActive(),
                                "Hourly interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily water usage
                        log.info("Get the Daily water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = "All";
                            log.info("Initializing the get water Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.HCF.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly water usage
                            log.info("Get the hourly water data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getHourlyWaterData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI,
                                        "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a");
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // If collection is non AMI
                        Assert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is still visible for Non AMI combo.");
                    }
                    // Check for single meter as well in Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    // Init AMI and Non-AMI meters
                    for (Meter meter : waterMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter is present amongst Multi-Meter
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying Hourly Interval
                        Assert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isHourlyIntervalLinkActive(),
                                "Hourly interval is not active after clicked.");
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = amiMeter;
                        log.info("Initializing the get water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily water usage
                        log.info("Get the Daily water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = amiMeter;
                            log.info("Initializing the get water Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.HCF.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly water usage
                            log.info("Get the hourly water data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getHourlyWaterData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI,
                                        "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a");
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // If Non AMI meter is present amongst Multi-Meter
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        softAssert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
                // If there is only one meter linked to the account
                else if (waterMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (waterMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying Hourly Interval
                        Assert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isHourlyIntervalLinkActive(),
                                "Hourly interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = waterMeters[0].getMeterNumber();
                        log.info("Initializing the get water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily water usage
                        log.info("Get the Daily water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = waterMeters[0].getMeterNumber();
                            log.info("Initializing the get water Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.HCF.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly water usage
                            log.info("Get the hourly water data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getHourlyWaterData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a");
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (waterMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        Assert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked water meter/meters.");
            }
        }
        // If there is no electric meter linked
        else {
            ExtentLogger.logSkip("There is no Electric meter linked to the account.");
        }
    }

    /**
     * Verify water usage data for minutes intervals.
     *
     * @param softAssert to soft assert all the validations.
     * @param user       user model to hit the API with user details
     * @param meters     meter array model linked to the account.
     */
    public void verifyMinutesWaterUsageData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init from and to date config
        Map<String, String> fromToDateConfig;
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Init periodicity
        periodicity = Intervals.IN.name();
        // Segregate water meters
        usageEndpoints.segregateWaterMeters(meters);
        waterMeters = UsageEndpoints.waterMeters.toArray(new Meter[0]);
        // Check whether having water meter or not
        if (waterMeters.length > 0) {
            ExtentLogger.logInfo("Water meters are linked to the account.");
            // Verify water tab should visible and selected by default
            Assert.assertTrue(isWaterTabVisible(),
                    "Water tab is not visible.");
            clickWaterTabLink();
            pause(1000);
            homeSteps.waitForPageLoader();
            Assert.assertTrue(isWaterTabActive(),
                    "Water tab is not active.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly water usage data for ALL meter scenario
                if (waterMeters.length > 1) {
                    ExtentLogger.logInfo("Number of water meters linked to the account {} " + waterMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < waterMeters.length; i++) {
                        if (waterMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    Assert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying Minutes Interval
                        Assert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isMinutesIntervalLinkActive(),
                                "Minutes interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily water usage
                        log.info("Get the Daily water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = "All";
                            log.info("Initializing the get water Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.HCF.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly water usage
                            log.info("Get the hourly water data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getMinutesWaterData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI,
                                        "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a");
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // If collection is non AMI
                        Assert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Minutes interval is still visible for Non AMI combo.");
                    }
                    // Check for single meter as well in Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    // Init AMI and Non-AMI meters
                    for (Meter meter : waterMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter is present amongst Multi-Meter
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying Minutes Interval
                        Assert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isMinutesIntervalLinkActive(),
                                "Minutes interval is not active after clicked.");
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily water usage
                        log.info("Get the Daily water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = "All";
                            log.info("Initializing the get water Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.HCF.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly water usage
                            log.info("Get the hourly water data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getMinutesWaterData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(
                                        monthAPI,
                                        "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a"
                                );
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // If Non AMI meter is present amongst Multi-Meter
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        softAssert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Hourly interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
                // If there is only one meter linked to the account
                else if (waterMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (waterMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying Minutes Interval
                        Assert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isMinutesIntervalLinkActive(),
                                "Minutes interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.HCF.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily water usage
                        log.info("Get the Daily water data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyWaterData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = "All";
                            log.info("Initializing the get water Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.HCF.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly water usage
                            log.info("Get the hourly water data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getMinutesWaterData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("HCF", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI,
                                        "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a"
                                );
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (waterMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        Assert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Hourly interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked water meter/meters.");
            }
        }
        // If there is no water meter linked
        else {
            ExtentLogger.logSkip("There is no water meter linked to the account.");
        }
    }

    /**
     * Verify gas usage data for monthly intervals.
     *
     * @param softAssert to soft assert all the validations.
     * @param user       user model to hit the API with user details
     * @param meters     meter array model linked to the account.
     */
    public void verifyMonthlyGasUsageData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init from and to date config
        Map<String, String> fromToDateConfig;
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Init periodicity
        periodicity = Intervals.MO.name();
        // Segregate gas meters
        usageEndpoints.segregateGasMeters(meters);
        gasMeters = UsageEndpoints.gasMeters.toArray(new Meter[0]);
        // Check whether having gas meter or not
        if (gasMeters.length > 0) {
            ExtentLogger.logInfo("Gas meters are linked to the account.");
            // Verify gas tab should visible and selected by default
            Assert.assertTrue(isGasTabVisible(),
                    "Gas tab is not visible.");
            clickGasTabLink();
            pause(1000);
            homeSteps.waitForPageLoader();
            Assert.assertTrue(isGasTabActive(),
                    "Gas tab is not active.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly gas usage data for ALL meter scenario
                if (gasMeters.length > 1) {
                    ExtentLogger.logInfo("Number of gas meters linked to the account {} " + gasMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < gasMeters.length; i++) {
                        if (gasMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    Assert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                periodicity
                        );
                        // Getting the daily gas usage
                        log.info("Get the Monthly gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Data verifications for Non AMI combo is passed successfully for Monthly interval.");
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // If collection is non AMI
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, false);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                periodicity
                        );
                        // Getting the daily gas usage
                        log.info("Get the Monthly gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Data verifications for Non AMI combo is passed successfully for Monthly interval.");
                    }
                    // Check for single meter as well in Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    // Init AMI and Non-AMI meters
                    for (Meter meter : gasMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter is present amongst Multi-Meter
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Click currency tab
                        clickCurrencyUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = amiMeter;
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                periodicity
                        );
                        // Getting the daily gas usage
                        log.info("Get the Monthly gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                    // If Non AMI meter is present amongst Multi-Meter
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Click currency tab
                        clickCurrencyUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // If collection is non AMI
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, false);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = nonAmiMeter;
                        log.info("Initializing the get water Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                periodicity
                        );
                        // Getting the daily gas usage
                        log.info("Get the Monthly gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
                // If there is only one meter linked to the account
                else if (gasMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (gasMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = gasMeters[0].getMeterNumber();
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                periodicity
                        );
                        // Getting the daily gas usage
                        log.info("Get the Monthly gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                    // Check if the single meter linked is Non AMI
                    else if (gasMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // If collection is non AMI
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, false);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = gasMeters[0].getMeterNumber();
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                periodicity
                        );
                        // Getting the daily gas usage
                        log.info("Get the Monthly gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getMonthlyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // SEGREGATE THE AMOUNT AND CONSUMPTION
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadingFrom().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertDateToMonthYear(monthAPI, "yyyy-MM-dd");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked gas meter/meters.");
            }
        }
        // If there is no gas meter linked
        else {
            ExtentLogger.logSkip("There is no gas meter linked to the account.");
        }
    }

    /**
     * Verify gas usage data for daily intervals.
     *
     * @param softAssert to soft assert all the validations.
     * @param user       user model to hit the API with user details
     * @param meters     meter array model linked to the account.
     */
    public void verifyDailyGasUsageData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init from and to date config
        Map<String, String> fromToDateConfig;
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Init periodicity
        periodicity = Intervals.DA.name();
        // Segregate gas meters
        usageEndpoints.segregateGasMeters(meters);
        gasMeters = UsageEndpoints.gasMeters.toArray(new Meter[0]);
        // Check whether having gas meter or not
        if (gasMeters.length > 0) {
            ExtentLogger.logInfo("Gas meters are linked to the account.");
            // Verify gas tab should visible and selected by default
            Assert.assertTrue(isGasTabVisible(),
                    "Gas tab is not visible.");
            clickGasTabLink();
            pause(1000);
            homeSteps.waitForPageLoader();
            Assert.assertTrue(isGasTabActive(),
                    "Gas tab is not active.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly gas usage data for ALL meter scenario
                if (gasMeters.length > 1) {
                    ExtentLogger.logInfo("Number of gas meters linked to the account {} " + gasMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < gasMeters.length; i++) {
                        if (gasMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    Assert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        Assert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isDailyIntervalLinkActive(),
                                "Daily interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                periodicity
                        );
                        // Getting the daily gas usage
                        log.info("Get the Monthly gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadDate().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd",
                                    "MMM d,yyyy");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Data verifications for Non AMI combo is passed successfully for Monthly interval.");
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // If collection is non AMI
                        Assert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is still visible for Non AMI combo.");
                    }
                    // Check for single meter as well in Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    // Init AMI and Non-AMI meters
                    for (Meter meter : gasMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter is present amongst Multi-Meter
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verify daily tab
                        Assert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isDailyIntervalLinkActive(),
                                "Daily interval is not active after clicked.");
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = amiMeter;
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                periodicity
                        );
                        // Getting the daily gas usage
                        log.info("Get the daily gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadDate().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd",
                                    "MMM d,yyyy");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                    // If Non AMI meter is present amongst Multi-Meter
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
                // If there is only one meter linked to the account
                else if (gasMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (gasMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verify daily tab
                        Assert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isDailyIntervalLinkActive(),
                                "Daily interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = gasMeters[0].getMeterNumber();
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                periodicity
                        );
                        // Getting the daily gas usage
                        log.info("Get the daily gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < usageResponseAPI.size(); i++) {
                            String month = usageResponseAPI.get(i).getReadDate().split("T")[0];
                            Double consumption = usageResponseAPI.get(i).getConsumption();
                            Double amt = usageResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + consumption);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, consumption);
                            }
                        }
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            consumptionUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                    .replaceAll(",", "");
                            consumeUI = MathUtil.toRoundoff(consumeUI);
                            String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(consumeUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd",
                                    "MMM d,yyyy");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                    // Check if the single meter linked is Non AMI
                    else if (gasMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        Assert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked gas meter/meters.");
            }
        }
        // If there is no gas meter linked
        else {
            ExtentLogger.logSkip("There is no gas meter linked to the account.");
        }
    }

    /**
     * Verify gas usage data for hourly intervals.
     *
     * @param softAssert to soft assert all the validations.
     * @param user       user model to hit the API with user details
     * @param meters     meter array model linked to the account.
     */
    public void verifyHourlyGasUsageData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init from and to date config
        Map<String, String> fromToDateConfig;
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Init periodicity
        periodicity = Intervals.HH.name();
        // Segregate gas meters
        usageEndpoints.segregateGasMeters(meters);
        gasMeters = UsageEndpoints.gasMeters.toArray(new Meter[0]);
        // Check whether having gas meter or not
        if (gasMeters.length > 0) {
            ExtentLogger.logInfo("Gas meters are linked to the account.");
            // Verify gas tab should visible and selected by default
            Assert.assertTrue(isGasTabVisible(),
                    "Gas tab is not visible.");
            clickGasTabLink();
            pause(1000);
            homeSteps.waitForPageLoader();
            Assert.assertTrue(isGasTabActive(),
                    "Gas tab is not active.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly gas usage data for ALL meter scenario
                if (gasMeters.length > 1) {
                    ExtentLogger.logInfo("Number of gas meters linked to the account {} " + gasMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < gasMeters.length; i++) {
                        if (gasMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    Assert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying Hourly Interval
                        Assert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isHourlyIntervalLinkActive(),
                                "Hourly interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily gas usage
                        log.info("Get the Daily gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = "All";
                            log.info("Initializing the get gas Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.kWh.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly gas usage
                            log.info("Get the hourly gas data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getHourlyGasData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI,
                                        "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a"
                                );
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // If collection is non AMI
                        Assert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is still visible for Non AMI combo.");
                    }
                    // Check for single meter as well in Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    // Init AMI and Non-AMI meters
                    for (Meter meter : gasMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter is present amongst Multi-Meter
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying Hourly Interval
                        Assert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isHourlyIntervalLinkActive(),
                                "Hourly interval is not active after clicked.");
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = amiMeter;
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily gas usage
                        log.info("Get the Daily gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = amiMeter;
                            log.info("Initializing the get gas Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.CCF.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly gas usage
                            log.info("Get the hourly gas data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getHourlyGasData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI,
                                        "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a"
                                );
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // If Non AMI meter is present amongst Multi-Meter
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        softAssert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
                // If there is only one meter linked to the account
                else if (gasMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (gasMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying Hourly Interval
                        Assert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isHourlyIntervalLinkActive(),
                                "Hourly interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = gasMeters[0].getMeterNumber();
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily gas usage
                        log.info("Get the Daily gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = gasMeters[0].getMeterNumber();
                            log.info("Initializing the get gas Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.CCF.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly gas usage
                            log.info("Get the hourly gas data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getHourlyGasData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI,
                                        "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a"
                                );
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (gasMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        Assert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked gas meter/meters.");
            }
        }
        // If there is no gas meter linked
        else {
            ExtentLogger.logSkip("There is no gas meter linked to the account.");
        }
    }

    /**
     * Verify gas usage data for minutes intervals.
     *
     * @param softAssert to soft assert all the validations.
     * @param user       user model to hit the API with user details
     * @param meters     meter array model linked to the account.
     */
    public void verifyMinutesGasUsageData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init from and to date config
        Map<String, String> fromToDateConfig;
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Init periodicity
        periodicity = Intervals.IN.name();
        // Segregate gas meters
        usageEndpoints.segregateGasMeters(meters);
        gasMeters = UsageEndpoints.gasMeters.toArray(new Meter[0]);
        // Check whether having gas meter or not
        if (gasMeters.length > 0) {
            ExtentLogger.logInfo("Gas meters are linked to the account.");
            // Verify gas tab should visible and selected by default
            Assert.assertTrue(isGasTabVisible(),
                    "Gas tab is not visible.");
            clickGasTabLink();
            pause(1000);
            homeSteps.waitForPageLoader();
            Assert.assertTrue(isGasTabActive(),
                    "Gas tab is not active.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly gas usage data for ALL meter scenario
                if (gasMeters.length > 1) {
                    ExtentLogger.logInfo("Number of gas meters linked to the account {} " + gasMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < gasMeters.length; i++) {
                        if (gasMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    Assert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying Minutes Interval
                        Assert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isMinutesIntervalLinkActive(),
                                "Minutes interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily gas usage
                        log.info("Get the Daily gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate,
                                    "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd"
                            );
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = "All";
                            log.info("Initializing the get gas Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.kWh.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly gas usage
                            log.info("Get the hourly gas data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getMinutesGasData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI,
                                        "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a"
                                );
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // If collection is non AMI
                        Assert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Minutes interval is still visible for Non AMI combo.");
                    }
                    // Check for single meter as well in Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    // Init AMI and Non-AMI meters
                    for (Meter meter : gasMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter is present amongst Multi-Meter
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying Minutes Interval
                        Assert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isMinutesIntervalLinkActive(),
                                "Minutes interval is not active after clicked.");
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily gas usage
                        log.info("Get the Daily gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = "All";
                            log.info("Initializing the get gas Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.CCF.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the minutes gas usage
                            log.info("Get the minutes gas data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getMinutesGasData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("kWh", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI,
                                        "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a"
                                );
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // If Non AMI meter is present amongst Multi-Meter
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        softAssert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Hourly interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
                // If there is only one meter linked to the account
                else if (gasMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (gasMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying Minutes Interval
                        Assert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        Assert.assertTrue(isMinutesIntervalLinkActive(),
                                "Minutes interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(Intervals.DA.name(), true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get gas Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.CCF.name(),
                                Intervals.DA.name()
                        );
                        // Getting the daily gas usage
                        log.info("Get the Daily gas data to check AMI data is present or not.");
                        usageResponseAPI = usageEndpoints.getDailyGasData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        if (usageResponseAPI.size() > 0) {
                            String readDate = usageResponseAPI.get(usageResponseAPI.size() - 2).getReadDate();
                            readDate = DateUtil.changeStringToDateInFormat(readDate, "yyyy-MM-dd'T'HH:mm:ss",
                                    "yyyy-MM-dd");
                            // INIT FROM AND TO DATE
                            fromDate = readDate + " 00:00:00";
                            toDate = readDate + " 23:00:00";
                            meter = "All";
                            log.info("Initializing the get gas Usage API parameters.");
                            // Init params pojo
                            usageParams = new UsageParams(
                                    user.getDefaultUtilityAccNum(),
                                    meter,
                                    fromDate,
                                    toDate,
                                    Uoms.kWh.name(),
                                    periodicity
                            );
                            // Select the date on UI as well
                            selectGivenDateInCalendar(readDate);
                            // Getting the hourly gas usage
                            log.info("Get the hourly gas data to check AMI data is present or not.");
                            usageResponseAPI = usageEndpoints.getMinutesGasData(
                                    user,
                                    usageParams,
                                    ResourcePaths.USAGE_PATH_URI
                            );
                            LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                            LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                            // Segregate the amount and consumption
                            for (int i = 0; i < usageResponseAPI.size(); i++) {
                                String time = usageResponseAPI.get(i).getReadDate();
                                time = time.split("\\+")[0];
                                Double consumption = usageResponseAPI.get(i).getConsumption();
                                Double amt = usageResponseAPI.get(i).getAmount();
                                if (amountAPI.containsKey(time) && consumptionAPI.containsKey(time)) {
                                    amountAPI.put(time, amountAPI.get(time) + amt);
                                    consumptionAPI.put(time, consumptionAPI.get(time) + consumption);
                                }
                                else {
                                    amountAPI.put(time, amt);
                                    consumptionAPI.put(time, consumption);
                                }
                            }
                            // Init Amount and Consumption from UI
                            LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                            LinkedHashMap<String, String> consumptionUI = new LinkedHashMap<>();
                            // Init amount
                            if (isCurrencyUnitLinkVisible()) {
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active by default.");
                                scrollCurrencyUnitIntoView();
                                pause(1000);
                                amountUI = getHistogramBarLabelsWithMonths();
                            }
                            // Init consumption
                            if (isMeasuringUnitLinkVisible()) {
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(500);
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                scrollMeasuringUnitIntoView();
                                pause(1000);
                                consumptionUI = getHistogramBarLabelsWithMonths();
                            }
                            // Verify the consumption API data with UI
                            for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                                String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                                String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                                String consumeUI = consumptionUI.get(monthUI).replace("CCF", "")
                                        .replaceAll(",", "");
                                consumeUI = MathUtil.toRoundoff(consumeUI);
                                String consumeAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                                MathUtil.assertDifference(consumeUI, consumeAPI);
                                String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                        .replace(currencyConfig, ""));
                                String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                                MathUtil.assertDifference(amtUI, amtAPI);
                                monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI,
                                        "yyyy-MM-dd'T'HH:mm:ss",
                                        "hh:mm a"
                                );
                                Assert.assertEquals(monthUI, monthAPI,
                                        "Month name not matched, Expected : "
                                                + monthAPI + " but Actual : " + monthUI);
                            }
                            ExtentLogger.logPass(
                                    "Data verifications for Non AMI combo is passed successfully for hourly interval.");
                        }
                        else {
                            ExtentLogger.logInfo(
                                    "There is no data present for the Hourly interval in the current month.");
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (gasMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo(
                                "The meter linked is Non AMI. Verifying the usage on UI as per we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        Assert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Hourly interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked gas meter/meters.");
            }
        }
        // If there is no gas meter linked
        else {
            ExtentLogger.logSkip("There is no gas meter linked to the account.");
        }
    }

    /**
     * Verify solar usage data for daily intervals.
     *
     * @param softAssert to soft assert all the validations.
     * @param user       user model to hit the API with user details
     * @param meters     meter array model linked to the account.
     */
    public void verifySolarUsageData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init from and to date config
        Map<String, String> fromToDateConfig;
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Init periodicity
        periodicity = Intervals.DA.name();
        // Segregate solar meters
        usageEndpoints.segregateSolarMeters(meters);
        solarMeters = UsageEndpoints.solarMeters.toArray(new Meter[0]);
        // Check whether having solar meter or not
        if (solarMeters.length > 0) {
            ExtentLogger.logInfo("Solar meters are linked to the account.");
            // Verify solar tab should visible and selected by default
            Assert.assertTrue(isSolarTabVisible(),
                    "Solar tab is not visible.");
            clickSolarLink();
            pause(500);
            homeSteps.waitForPageLoader();
            Assert.assertTrue(isSolarTabActive(),
                    "Solar tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly solar usage data for ALL meter scenario
                if (solarMeters.length > 1) {
                    ExtentLogger.logInfo("Number of solar meters linked to the account {} " + solarMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < solarMeters.length; i++) {
                        if (solarMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        Assert.assertTrue(isDailyIntervalLinkActive(),
                                "Daily interval is not active after clicked.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = "All";
                        log.info("Initializing the get solar Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                periodicity
                        );
                        // Getting the daily solar usage
                        log.info("Get the solar data to check AMI data is present or not.");
                        generationResponseAPI = usageEndpoints.getDailyGenerationData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> consumptionAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < generationResponseAPI.size(); i++) {
                            String month = generationResponseAPI.get(i).getReadDate().split("T")[0];
                            Double generation = generationResponseAPI.get(i).getGeneration();
                            Double amt = generationResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && consumptionAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                consumptionAPI.put(month, consumptionAPI.get(month) + generation);
                            }
                            else {
                                amountAPI.put(month, amt);
                                consumptionAPI.put(month, generation);
                            }
                        }
                        // Init Amount and Generation from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> generationUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            generationUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String genUI = generationUI.get(monthUI).replace("kWh", "")
                                    .replaceAll(",", "");
                            genUI = MathUtil.toRoundoff(genUI);
                            String genAPI = MathUtil.toRoundoff(consumptionAPI.get(monthAPI));
                            MathUtil.assertDifference(genUI, genAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd",
                                    "MMM d,yyyy");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Data verifications for Non AMI combo is passed successfully for Monthly interval.");
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // If collection is non AMI
                        Assert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is still visible for Non AMI combo.");
                    }
                    // Check for single meter as well in Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    // Init AMI and Non-AMI meters
                    for (Meter meter : solarMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter is present amongst Multi-Meter
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertFalse(isMonthlyIntervalLinkVisible(),
                                "Monthly interval is visible.");
                        // Verify daily tab
                        Assert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is visible for AMI combo.");
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = amiMeter;
                        log.info("Initializing the get Solar Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                periodicity
                        );
                        // Getting the daily generation usage
                        log.info("Get the daily generation data to check AMI data is present or not.");
                        generationResponseAPI = usageEndpoints.getDailyGenerationData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> generationAPI = new LinkedHashMap<>();
                        // Segregate the amount and consumption
                        for (int i = 0; i < generationResponseAPI.size(); i++) {
                            String month = generationResponseAPI.get(i).getReadDate().split("T")[0];
                            Double generation = generationResponseAPI.get(i).getGeneration();
                            Double amt = generationResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && generationAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                generationAPI.put(month, generationAPI.get(month) + generation);
                            }
                            else {
                                amountAPI.put(month, amt);
                                generationAPI.put(month, generation);
                            }
                        }
                        // Init Amount and Generation from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> generationUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            generationUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String genUI = generationUI.get(monthUI).replace("kWh", "")
                                    .replaceAll(",", "");
                            genUI = MathUtil.toRoundoff(genUI);
                            String consumeAPI = MathUtil.toRoundoff(generationAPI.get(monthAPI));
                            MathUtil.assertDifference(genUI, consumeAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd",
                                    "MMMM d, yyyy");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                    // If Non AMI meter is present amongst Multi-Meter
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertFalse(isMonthlyIntervalLinkVisible(),
                                "Monthly interval by default not selected.");
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is displaying for the Non AMI meter as well.");
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as per we are getting from API for Non AMI meter.");
                    }
                }
                // If there is only one meter linked to the account
                else if (solarMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (solarMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo(
                                "The meter linked is AMI. Verifying the usage on UI as we are getting from API.");
                        // Verifying for monthly intervals
                        softAssert.assertFalse(isMonthlyIntervalLinkVisible(),
                                "Monthly interval is visible.");
                        // Verify daily tab
                        Assert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is visible for AMI combo.");
                        // If collection is AMI.
                        fromToDateConfig = UsageEndpoints.initFromAndToDate(periodicity, true);
                        fromDate = fromToDateConfig.get("fromDate");
                        toDate = fromToDateConfig.get("toDate");
                        meter = solarMeters[0].getMeterNumber();
                        log.info("Initializing the get solar Usage API parameters.");
                        // Init params pojo
                        usageParams = new UsageParams(
                                user.getDefaultUtilityAccNum(),
                                meter,
                                fromDate,
                                toDate,
                                Uoms.kWh.name(),
                                periodicity
                        );
                        // Getting the daily solar usage
                        log.info("Get the daily solar data to check AMI data is present or not.");
                        generationResponseAPI = usageEndpoints.getDailyGenerationData(
                                user,
                                usageParams,
                                ResourcePaths.USAGE_PATH_URI
                        );
                        LinkedHashMap<String, Double> amountAPI = new LinkedHashMap<>();
                        LinkedHashMap<String, Double> generationAPI = new LinkedHashMap<>();
                        // Segregate the amount and generation
                        for (int i = 0; i < generationResponseAPI.size(); i++) {
                            String month = generationResponseAPI.get(i).getReadDate().split("T")[0];
                            Double generation = generationResponseAPI.get(i).getGeneration();
                            Double amt = generationResponseAPI.get(i).getAmount();
                            if (amountAPI.containsKey(month) && generationAPI.containsKey(month)) {
                                amountAPI.put(month, amountAPI.get(month) + amt);
                                generationAPI.put(month, generationAPI.get(month) + generation);
                            }
                            else {
                                amountAPI.put(month, amt);
                                generationAPI.put(month, generation);
                            }
                        }
                        // Init Amount and Generation from UI
                        LinkedHashMap<String, String> amountUI = new LinkedHashMap<>();
                        LinkedHashMap<String, String> generationUI = new LinkedHashMap<>();
                        // Init amount
                        if (isCurrencyUnitLinkVisible()) {
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active by default.");
                            scrollCurrencyUnitIntoView();
                            pause(1000);
                            amountUI = getHistogramBarLabelsWithMonths();
                        }
                        // Init consumption
                        if (isMeasuringUnitLinkVisible()) {
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(500);
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            scrollMeasuringUnitIntoView();
                            pause(1000);
                            generationUI = getHistogramBarLabelsWithMonths();
                        }
                        // Verify the consumption API data with UI
                        for (int i = 0; i < amountUI.size() && i < amountAPI.size(); i++) {
                            String monthAPI = (String) new Vector(amountAPI.keySet()).get(i);
                            String monthUI = (String) new Vector(amountUI.keySet()).get(i);
                            String genUI = generationUI.get(monthUI).replace("kWh", "")
                                    .replaceAll(",", "");
                            genUI = MathUtil.toRoundoff(genUI);
                            String genAPI = MathUtil.toRoundoff(generationAPI.get(monthAPI));
                            MathUtil.assertDifference(genUI, genAPI);
                            String amtUI = MathUtil.toRoundoff(amountUI.get(monthUI)
                                    .replace(currencyConfig, ""));
                            String amtAPI = MathUtil.toRoundoff(amountAPI.get(monthAPI));
                            MathUtil.assertDifference(amtUI, amtAPI);
                            monthAPI = DateUtil.convertIntoSpecificDateFormat(monthAPI, "yyyy-MM-dd",
                                    "MMM d,yyyy");
                            Assert.assertEquals(monthUI, monthAPI,
                                    "Month name not matched, Expected : "
                                            + monthAPI + " but Actual : " + monthUI);
                        }
                        ExtentLogger.logPass(
                                "Verified successfully the usage on UI as we are getting from API for the AMI meter.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked solar meter/meters.");
            }
        }
        // If there is no solar meter linked
        else {
            ExtentLogger.logSkip("There is no Solar meter linked to the account.");
        }
    }

    /**
     * Verify export to excel feature for electric meter.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyElectricExportToExcelFunctionality(SoftAssert softAssert, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate electric meters
        usageEndpoints.segregateElectricMeters(meters);
        electricMeters = UsageEndpoints.electricMeters.toArray(new Meter[0]);
        // Check whether having electric meter or not
        if (electricMeters.length > 0) {
            ExtentLogger.logInfo("Electric meters are linked to the account.");
            // Verify electric tab should visible and selected by default
            Assert.assertTrue(isElectricTabVisible(),
                    "Electric tab is not visible.");
            Assert.assertTrue(isElectricTabActive(),
                    "Electric tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly electric usage data for ALL meter scenario
                if (electricMeters.length > 1) {
                    ExtentLogger.logInfo("Number of electric meters linked to the account {} " + electricMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < electricMeters.length; i++) {
                        if (electricMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        softAssert.assertTrue(isMonthlyIntervalLinkActive());
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // Init consumption from UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // Deleting any existing file
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, electricMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, electricMeters, "kWh");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        // Changes view to Daily
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(amountUI, electricMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(consumptionUI, electricMeters, "kWh");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        // Changes view to Hourly
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(amountUI, electricMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(consumptionUI, electricMeters, "kWh");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Changes view to Minutes
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(amountUI, electricMeters, currencyConfig);
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(consumptionUI, electricMeters, currencyConfig);
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // Verifying other interval tabs than monthly.
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, electricMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, electricMeters, "kWh");
                        ExtentLogger.logPass("Verifications for Non AMI combo is passed successfully.");
                    }
                    // Check for single meter as well if its Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    for (Meter meter : electricMeters) {
                        if (meter.getIsAmi() == 1) {
                            amiMeter = meter.getMeterNumber();
                            amiMeters[0] = meter;
                            break;
                        }
                        else if (meter.getIsAmi() == 0) {
                            nonAmiMeter = meter.getMeterNumber();
                            nonAMIMeters[0] = meter;
                            break;
                        }
                    }
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, amiMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, amiMeters, "kWh");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        // Changes view to Daily
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(amountUI, electricMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(consumptionUI, electricMeters, "kWh");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        // Changes view to Hourly
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(amountUI, electricMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(consumptionUI, electricMeters, "kWh");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Changes view to Minutes
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(amountUI, electricMeters, currencyConfig);
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(consumptionUI, electricMeters, currencyConfig);
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, nonAMIMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, nonAMIMeters, "kWh");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                    }
                }
                // Check if there is single meter linked to the account
                else if (electricMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (electricMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        amiMeters[0] = electricMeters[0];
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, amiMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, amiMeters, "kWh");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        // Changes view to Daily
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(amountUI, electricMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(consumptionUI, electricMeters, "kWh");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        // Changes view to Hourly
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(amountUI, electricMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(consumptionUI, electricMeters, "kWh");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Changes view to Minutes
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(amountUI, electricMeters, currencyConfig);
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(consumptionUI, electricMeters, currencyConfig);
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (electricMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        nonAMIMeters[0] = electricMeters[0];
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, nonAMIMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, nonAMIMeters, "kWh");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked electric meter/meters.");
            }
        }
        // If there is no electric meter linked
        else {
            ExtentLogger.logSkip("There is no Electric meter linked to the account.");
        }
    }

    /**
     * Verify export to excel feature for water meter.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyWaterExportToExcelFunctionality(SoftAssert softAssert, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate water meters
        usageEndpoints.segregateWaterMeters(meters);
        waterMeters = UsageEndpoints.waterMeters.toArray(new Meter[0]);
        // Check whether having water meter or not
        if (waterMeters.length > 0) {
            ExtentLogger.logInfo("Water meters are linked to the account.");
            // Verify water tab should visible and selected by default
            Assert.assertTrue(isWaterTabVisible(),
                    "Water tab is not visible.");
            clickWaterTabLink();
            homeSteps.waitForPageLoader();
            pause(1000);
            Assert.assertTrue(isWaterTabActive(),
                    "Water tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly water usage data for ALL meter scenario
                if (waterMeters.length > 1) {
                    ExtentLogger.logInfo("Number of water meters linked to the account {} " + waterMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < waterMeters.length; i++) {
                        if (waterMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        softAssert.assertTrue(isMonthlyIntervalLinkActive());
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // Init consumption from UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // Deleting any existing file
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, waterMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, waterMeters, "HCF");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        // Changes view to Daily
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(amountUI, waterMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(consumptionUI, waterMeters, "HCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        // Changes view to Hourly
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(amountUI, waterMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(consumptionUI, waterMeters, "HCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Changes view to Minutes
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(amountUI, waterMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(consumptionUI, waterMeters, "HCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // Verifying other interval tabs than monthly.
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, waterMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, waterMeters, "HCF");
                        ExtentLogger.logPass("Verifications for Non AMI combo is passed successfully.");
                    }
                    // Check for single meter as well if its Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    for (Meter meter : waterMeters) {
                        if (meter.getIsAmi() == 1) {
                            amiMeter = meter.getMeterNumber();
                            amiMeters[0] = meter;
                            break;
                        }
                        else if (meter.getIsAmi() == 0) {
                            nonAmiMeter = meter.getMeterNumber();
                            nonAMIMeters[0] = meter;
                            break;
                        }
                    }
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, amiMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, amiMeters, "HCF");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        // Changes view to Daily
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(amountUI, waterMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(consumptionUI, waterMeters, "HCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        // Changes view to Hourly
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(amountUI, waterMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(consumptionUI, waterMeters, "HCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Changes view to Minutes
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(amountUI, waterMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(consumptionUI, waterMeters, "HCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, nonAMIMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, nonAMIMeters, "HCF");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                    }
                }
                // Check if there is single meter linked to the account
                else if (waterMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (waterMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        amiMeters[0] = waterMeters[0];
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, amiMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, amiMeters, "HCF");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        // Changes view to Daily
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(amountUI, waterMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(consumptionUI, waterMeters, "HCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        // Changes view to Hourly
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(amountUI, waterMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(consumptionUI, waterMeters, "HCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Changes view to Minutes
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(amountUI, waterMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(consumptionUI, waterMeters, "HCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (waterMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        nonAMIMeters[0] = waterMeters[0];
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, nonAMIMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, nonAMIMeters, "HCF");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked water meter/meters.");
            }
        }
        // If there is no water meter linked
        else {
            ExtentLogger.logSkip("There is no water meter linked to the account.");
        }
    }

    /**
     * Verify export to excel feature for gas meter.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyGasExportToExcelFunctionality(SoftAssert softAssert, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate gas meters
        usageEndpoints.segregateGasMeters(meters);
        gasMeters = UsageEndpoints.gasMeters.toArray(new Meter[0]);
        // Check whether having gas meter or not
        if (gasMeters.length > 0) {
            ExtentLogger.logInfo("Gas meters are linked to the account.");
            // Verify gas tab should visible and selected by default
            Assert.assertTrue(isGasTabVisible(),
                    "Gas tab is not visible.");
            clickGasTabLink();
            homeSteps.waitForPageLoader();
            pause(1000);
            Assert.assertTrue(isGasTabActive(),
                    "Gas tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly gas usage data for ALL meter scenario
                if (gasMeters.length > 1) {
                    ExtentLogger.logInfo("Number of gas meters linked to the account {} "
                            + gasMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < gasMeters.length; i++) {
                        if (gasMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        softAssert.assertTrue(isMonthlyIntervalLinkActive());
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // Init consumption from UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // Deleting any existing file
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, gasMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, gasMeters, "CCF");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        // Changes view to Daily
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(amountUI, gasMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(consumptionUI, gasMeters, "CCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        // Changes view to Hourly
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(amountUI, gasMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(consumptionUI, gasMeters, "CCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Changes view to Minutes
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(amountUI, gasMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(consumptionUI, gasMeters, "CCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked" +
                                " are Non AMI");
                        // Verifying other interval tabs than monthly.
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, gasMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, gasMeters, "CCF");
                        ExtentLogger.logPass("Verifications for Non AMI combo is passed successfully.");
                    }
                    // Check for single meter as well if its Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    for (Meter meter : gasMeters) {
                        if (meter.getIsAmi() == 1) {
                            amiMeter = meter.getMeterNumber();
                            amiMeters[0] = meter;
                            break;
                        }
                        else if (meter.getIsAmi() == 0) {
                            nonAmiMeter = meter.getMeterNumber();
                            nonAMIMeters[0] = meter;
                            break;
                        }
                    }
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, amiMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, amiMeters, "CCF");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        // Changes view to Daily
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(amountUI, gasMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(consumptionUI, gasMeters, "CCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        // Changes view to Hourly
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(amountUI, gasMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(consumptionUI, gasMeters, "CCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Changes view to Minutes
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(amountUI, gasMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(consumptionUI, gasMeters, "CCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, nonAMIMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, nonAMIMeters, "CCF");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                    }
                }
                // Check if there is single meter linked to the account
                else if (gasMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (gasMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        amiMeters[0] = gasMeters[0];
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, amiMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, amiMeters, "CCF");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        // Changes view to Daily
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(amountUI, gasMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareDailyUsageExcel(consumptionUI, gasMeters, "CCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        // Changes view to Hourly
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(amountUI, gasMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareHourlyUsageExcel(consumptionUI, gasMeters, "CCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Changes view to Minutes
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verify the currency unit is visible and active.
                                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                        "Currency unit link is not visible.");
                                Assert.assertTrue(isCurrencyUnitLinkActive(),
                                        "Currency unit link is not active.");
                                // INIT CONSUMPTION FROM UI
                                amountUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(amountUI, gasMeters, "Dollar");
                                // Verify the measuring unit is visible and active.
                                Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                        "Measuring unit link is not visible.");
                                Assert.assertTrue(isMeasuringUnitLinkActive(),
                                        "Measuring unit link is not active.");
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // INIT CONSUMPTION FROM UI
                                consumptionUI = getHistogramBarLabelsWithMonths();
                                // DELETING ANY EXISTING FILE
                                FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                                clickExportUsageLink();
                                pause(2000);
                                clickExportToExcelLink();
                                pause(2000);
                                clickCloseExportUsageLink();
                                // COMPARING DATA WITH EXCEL
                                compareQuarterlyUsageExcel(consumptionUI, gasMeters, "CCF");
                                // Verifying other interval tabs than monthly.
                                softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                        "Daily interval is not visible for AMI combo.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (gasMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        nonAMIMeters[0] = gasMeters[0];
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // INIT CONSUMPTION FROM UI
                        amountUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(amountUI, nonAMIMeters, "Dollar");
                        // Verify the measuring unit is visible and active.
                        Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                "Measuring unit link is not visible.");
                        Assert.assertTrue(isMeasuringUnitLinkActive(),
                                "Measuring unit link is not active.");
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // INIT CONSUMPTION FROM UI
                        consumptionUI = getHistogramBarLabelsWithMonths();
                        // DELETING ANY EXISTING FILE
                        FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                        clickExportUsageLink();
                        pause(2000);
                        clickExportToExcelLink();
                        pause(2000);
                        clickCloseExportUsageLink();
                        // COMPARING DATA WITH EXCEL
                        compareMonthlyUsageExcel(consumptionUI, nonAMIMeters, "CCF");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked gas meter/meters.");
            }
        }
        // If there is no gas meter linked
        else {
            ExtentLogger.logSkip("There is no gas meter linked to the account.");
        }
    }

    /**
     * Verify export to excel feature for solar meter.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyGenerationExportToExcelFunctionality(SoftAssert softAssert, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate solar meters
        usageEndpoints.segregateSolarMeters(meters);
        solarMeters = UsageEndpoints.solarMeters.toArray(new Meter[0]);
        // Check whether having solar meter or not
        if (solarMeters.length > 0) {
            ExtentLogger.logInfo("Solar meters are linked to the account.");
            // Verify solar tab should visible and selected by default
            Assert.assertTrue(isSolarTabVisible(),
                    "Solar tab is not visible.");
            clickSolarLink();
            homeSteps.waitForPageLoader();
            pause(1000);
            Assert.assertTrue(isSolarTabActive(),
                    "Solar tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify monthly solar usage data for ALL meter scenario
                if (solarMeters.length > 1) {
                    ExtentLogger.logInfo("Number of solar meters linked to the account {} " + solarMeters.length);
                    // Verifying Meter Drop-Down
                    softAssert.assertEquals(getMeterNumberLabel(),
                            usageTextProp.getPropValue("lblMeterNumber"),
                            "Meter number label not matched."
                    );
                    // Checking the collection type
                    for (int i = 0; i < solarMeters.length; i++) {
                        if (solarMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        softAssert.assertTrue(isMonthlyIntervalLinkActive());
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        isDataNotAvailable = isDataNotAvailableLabelVisible();
                        if (!isDataNotAvailable) {
                            // Verify the currency unit is visible and active.
                            Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                    "Currency unit link is not visible.");
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active.");
                            // INIT CONSUMPTION FROM UI
                            amountUI = getHistogramBarLabelsWithMonths();
                            // DELETING ANY EXISTING FILE
                            FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                            clickExportUsageLink();
                            pause(2000);
                            clickExportToExcelLink();
                            pause(2000);
                            clickCloseExportUsageLink();
                            // COMPARING DATA WITH EXCEL
                            compareDailyUsageExcel(amountUI, solarMeters, "Dollar");
                            // Verify the measuring unit is visible and active.
                            Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                    "Measuring unit link is not visible.");
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(1000);
                            // INIT CONSUMPTION FROM UI
                            consumptionUI = getHistogramBarLabelsWithMonths();
                            // DELETING ANY EXISTING FILE
                            FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                            clickExportUsageLink();
                            pause(2000);
                            clickExportToExcelLink();
                            pause(2000);
                            clickCloseExportUsageLink();
                            // COMPARING DATA WITH EXCEL
                            compareDailyUsageExcel(consumptionUI, solarMeters, currencyConfig);
                        }
                        else {
                            softAssert.assertEquals(getDataNotAvailableLabel(),
                                    usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                    "No usage data label not matched."
                            );
                        }
                    }
                    // Check for single meter as well if its Multi-Meter case
                    String amiMeter = null;
                    for (Meter meter : solarMeters) {
                        if (meter.getIsAmi() == 1) {
                            amiMeter = meter.getMeterNumber();
                            amiMeters[0] = meter;
                            break;
                        }
                    }
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        // Verifying for daily intervals
                        isDataNotAvailable = isDataNotAvailableLabelVisible();
                        if (!isDataNotAvailable) {
                            // Verify the currency unit is visible and active.
                            Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                    "Currency unit link is not visible.");
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active.");
                            // INIT CONSUMPTION FROM UI
                            amountUI = getHistogramBarLabelsWithMonths();
                            // DELETING ANY EXISTING FILE
                            FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                            clickExportUsageLink();
                            pause(2000);
                            clickExportToExcelLink();
                            pause(2000);
                            clickCloseExportUsageLink();
                            // COMPARING DATA WITH EXCEL
                            compareDailyUsageExcel(amountUI, solarMeters, currencyConfig);
                            // Verify the measuring unit is visible and active.
                            Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                    "Measuring unit link is not visible.");
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(1000);
                            // INIT CONSUMPTION FROM UI
                            consumptionUI = getHistogramBarLabelsWithMonths();
                            // DELETING ANY EXISTING FILE
                            FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                            clickExportUsageLink();
                            pause(2000);
                            clickExportToExcelLink();
                            pause(2000);
                            clickCloseExportUsageLink();
                            // COMPARING DATA WITH EXCEL
                            compareDailyUsageExcel(consumptionUI, solarMeters, currencyConfig);
                            // Verifying other interval tabs than monthly.
                            softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                    "Daily interval is not visible for AMI combo.");
                        }
                        else {
                            softAssert.assertEquals(getDataNotAvailableLabel(),
                                    usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                    "No usage data label not matched."
                            );
                        }
                    }
                }
                // Check if there is single meter linked to the account
                else if (solarMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (solarMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        amiMeters[0] = solarMeters[0];
                        // Init Amount and Consumption from UI
                        LinkedHashMap<String, String> amountUI;
                        LinkedHashMap<String, String> consumptionUI;
                        // Verify the currency unit is visible and active.
                        Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                "Currency unit link is not visible.");
                        Assert.assertTrue(isCurrencyUnitLinkActive(),
                                "Currency unit link is not active.");
                        isDataNotAvailable = isDataNotAvailableLabelVisible();
                        if (!isDataNotAvailable) {
                            // Verify the currency unit is visible and active.
                            Assert.assertTrue(isCurrencyUnitLinkVisible(),
                                    "Currency unit link is not visible.");
                            Assert.assertTrue(isCurrencyUnitLinkActive(),
                                    "Currency unit link is not active.");
                            // INIT CONSUMPTION FROM UI
                            amountUI = getHistogramBarLabelsWithMonths();
                            // DELETING ANY EXISTING FILE
                            FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                            clickExportUsageLink();
                            pause(2000);
                            clickExportToExcelLink();
                            pause(2000);
                            clickCloseExportUsageLink();
                            // COMPARING DATA WITH EXCEL
                            compareDailyUsageExcel(amountUI, solarMeters, currencyConfig);
                            // Verify the measuring unit is visible and active.
                            Assert.assertTrue(isMeasuringUnitLinkVisible(),
                                    "Measuring unit link is not visible.");
                            Assert.assertTrue(isMeasuringUnitLinkActive(),
                                    "Measuring unit link is not active.");
                            clickMeasuringUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(1000);
                            // INIT CONSUMPTION FROM UI
                            consumptionUI = getHistogramBarLabelsWithMonths();
                            // DELETING ANY EXISTING FILE
                            FileUtil.deleteFiles(FilePaths.DOWNLOAD_PATH);
                            clickExportUsageLink();
                            pause(2000);
                            clickExportToExcelLink();
                            pause(2000);
                            clickCloseExportUsageLink();
                            // COMPARING DATA WITH EXCEL
                            compareDailyUsageExcel(consumptionUI, solarMeters, currencyConfig);
                            // Verifying other interval tabs than monthly.
                            softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                    "Daily interval is not visible for AMI combo.");
                        }
                        else {
                            softAssert.assertEquals(getDataNotAvailableLabel(),
                                    usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                    "No usage data label not matched."
                            );
                        }
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked solar meter/meters.");
            }
        }
        // If there is no solar meter linked
        else {
            ExtentLogger.logSkip("There is no solar meter linked to the account.");
        }
    }

    /**
     * This is to verify the color logic for electric meters
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyElectricUsageColorLogic(SoftAssert softAssert, Meter[] meters) {
        ResultSet resultSet = DataBaseUtils.getResultSet(SQLQueries.getConfigValue("Usage"));
        Map<String, String> legendColorsConfig = new HashMap<>();
        // Init currency config
        String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
        try {
            while (resultSet.next()) {
                legendColorsConfig.put(
                        resultSet.getString("ConfigOption"),
                        resultSet.getString("ConfigValue")
                );
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        String colorHighUsageDb = legendColorsConfig.get("High");
        String colorAvgUsageDb = legendColorsConfig.get("Mid");
        String colorLowUsageDb = legendColorsConfig.get("Low");
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate electric meters
        usageEndpoints.segregateElectricMeters(meters);
        electricMeters = UsageEndpoints.electricMeters.toArray(new Meter[0]);
        // Segregate solar meters
        usageEndpoints.segregateSolarMeters(meters);
        solarMeters = UsageEndpoints.solarMeters.toArray(new Meter[0]);
        // Check whether having electric meter or not
        if (electricMeters.length > 0) {
            ExtentLogger.logInfo("Electric meters are linked to the account.");
            // Verify electric tab should visible and selected by default
            Assert.assertTrue(isElectricTabVisible(),
                    "Electric tab is not visible.");
            Assert.assertTrue(isElectricTabActive(),
                    "Electric tab is not active by default.");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify legend colors for the measuring unit bars
                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                        "Currency unit tab is not visible.");
                Assert.assertTrue(isCurrencyUnitLinkActive(),
                        "Currency unit tab is not active.");
                // Init the average unit
                String avgThisYear = getAverageThisYearValue()
                        .replace(",", "")
                        .replace(currencyConfig, "");
                Double average = Double.parseDouble(avgThisYear);
                List<WebElement> histogramBarElements = getHistogramBarUnitLabelElements();
                int counter = 0;
                for (WebElement element : histogramBarElements) {
                    waitForElementToBeVisible(element);
                    String histogramColor = getAttribute(element, "fill");
                    if (histogramColor.contains("rgb")) {
                        String colorArray[];
                        colorArray = histogramColor.replace("rgb(", "").split(",");
                        histogramColor = String.format("#%02x%02x%02x", Integer.parseInt(colorArray[0].trim()),
                                Integer.parseInt(colorArray[1].trim()), Integer.parseInt(colorArray[2].trim()));
                    }
                    mouseHover(element);
                    String tooltip = getHistogramBarToolTip();
                    tooltip = tooltip.split(":")[1].trim();
                    Double usage = Double.parseDouble(
                            tooltip.replace(",", "")
                                    .replace(currencyConfig, ""));
                    if (usage <= (average / 2)) {
                        Assert.assertEquals(histogramColor, colorLowUsageDb,
                                "Low Usage Histogram Color : " + histogramColor + "\n" +
                                        "Low Usage Color in DB : " + colorLowUsageDb + "\n" +
                                        "Failed for low usage color at iteration : " + counter);
                    }
                    else if (usage > (average / 2) && usage <= (average)) {
                        Assert.assertEquals(histogramColor, colorAvgUsageDb,
                                "Average Usage Histogram Color : " + histogramColor + "\n" +
                                        "Average Usage Color in DB : " + colorLowUsageDb + "\n" +
                                        "Failed for average usage color at iteration : " + counter);
                    }
                    else if (usage > average) {
                        Assert.assertEquals(histogramColor, colorHighUsageDb,
                                "High Usage Histogram Color : " + histogramColor + "\n" +
                                        "High Usage Color in DB : " + colorLowUsageDb + "\n" +
                                        "Failed for high usage color at iteration : " + counter);
                    }
                    counter++;
                    pause(1000);
                }
                // Verify legend colors for the currency unit bars
                clickMeasuringUnitLink();
                homeSteps.waitForPageLoader();
                pause(1000);
                avgThisYear = getAverageThisYearValue()
                        .replace(",", "")
                        .replace("kWh", "");
                average = Double.parseDouble(avgThisYear);
                histogramBarElements = getHistogramBarMonthLabelElements();
                counter = 0;
                for (WebElement element : histogramBarElements) {
                    waitForElementToBeVisible(element);
                    String histogramColor = getAttribute(element, "fill");
                    if (histogramColor.contains("rgb")) {
                        String colorArray[];
                        colorArray = histogramColor.replace("rgb(", "").split(",");
                        histogramColor = String.format("#%02x%02x%02x", Integer.parseInt(colorArray[0].trim()),
                                Integer.parseInt(colorArray[1].trim()), Integer.parseInt(colorArray[2].trim()));
                    }
                    mouseHover(element);
                    String tooltip = getHistogramBarToolTip();
                    tooltip = tooltip.split(":")[1].trim();
                    Double usage = Double.parseDouble(
                            tooltip.replace(",", "")
                                    .replace("kWh", "")
                    );
                    if (usage <= (average / 2)) {
                        Assert.assertEquals(histogramColor, colorLowUsageDb,
                                "Low Usage Histogram Color : " + histogramColor + "\n" +
                                        "Low Usage Color in DB : " + colorLowUsageDb + "\n" +
                                        "Failed for low usage color at iteration : " + counter);
                    }
                    else if (usage > (average / 2) && usage <= (average)) {
                        Assert.assertEquals(histogramColor, colorAvgUsageDb,
                                "Average Usage Histogram Color : " + histogramColor + "\n" +
                                        "Average Usage Color in DB : " + colorLowUsageDb + "\n" +
                                        "Failed for average usage color at iteration : " + counter);
                    }
                    else if (usage > average) {
                        Assert.assertEquals(histogramColor, colorHighUsageDb,
                                "High Usage Histogram Color : " + histogramColor + "\n" +
                                        "High Usage Color in DB : " + colorLowUsageDb + "\n" +
                                        "Failed for high usage color at iteration : " + counter);
                    }
                    counter++;
                    pause(1000);
                }
            }
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked electric meter/meters.");
            }
        }
        // If there is no electric meter linked
        else {
            ExtentLogger.logSkip("There is no Electric meter linked to the account.");
        }
    }

    /**
     * This is to verify the color logic for water meters
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyWaterUsageColorLogic(SoftAssert softAssert, Meter[] meters) {
        ResultSet resultSet = DataBaseUtils.getResultSet(SQLQueries.getConfigValue("Usage"));
        Map<String, String> legendColorsConfig = new HashMap<>();
        // Init currency config
        String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
        try {
            while (resultSet.next()) {
                legendColorsConfig.put(
                        resultSet.getString("ConfigOption"),
                        resultSet.getString("ConfigValue")
                );
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        String colorHighUsageDb = legendColorsConfig.get("High");
        String colorAvgUsageDb = legendColorsConfig.get("Mid");
        String colorLowUsageDb = legendColorsConfig.get("Low");
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate water meters
        usageEndpoints.segregateWaterMeters(meters);
        waterMeters = UsageEndpoints.waterMeters.toArray(new Meter[0]);
        // Check whether having water meter or not
        if (waterMeters.length > 0) {
            ExtentLogger.logInfo("Water meters are linked to the account.");
            // Verify water tab should visible and selected by default
            Assert.assertTrue(isWaterTabVisible(),
                    "Water tab is not visible.");
            clickWaterTabLink();
            homeSteps.waitForPageLoader();
            pause(1000);
            Assert.assertTrue(isWaterTabActive(),
                    "Water tab is not active by default.");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify legend colors for the measuring unit bars
                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                        "Currency unit tab is not visible.");
                Assert.assertTrue(isCurrencyUnitLinkActive(),
                        "Currency unit tab is not active.");
                // Init the average unit
                String avgThisYear = getAverageThisYearValue()
                        .replace(",", "")
                        .replace(currencyConfig, "");
                Double average = Double.parseDouble(avgThisYear);
                List<WebElement> lblHistogramMonths = getHistogramBarMonthLabelElements();
                for (WebElement element : lblHistogramMonths) {
                    waitForElementToBeVisible(element);
                    String histogramColor = getAttribute(element, "fill");
                    mouseHover(element);
                    String tooltip = getHistogramBarToolTip();
                    tooltip = tooltip.split(":")[1].trim();
                    Double usage = Double.parseDouble(tooltip.replace(",", ""));
                    if (usage <= (average / 2)) {
                        Assert.assertEquals(histogramColor, colorLowUsageDb);
                    }
                    else if (usage > (average / 2) && usage <= (average)) {
                        Assert.assertEquals(histogramColor, colorAvgUsageDb);
                    }
                    else if (usage > average) {
                        Assert.assertEquals(histogramColor, colorHighUsageDb);
                    }
                }
                // Verify legend colors for the currency unit bars
                clickMeasuringUnitLink();
                homeSteps.waitForPageLoader();
                pause(1000);
                avgThisYear = getAverageThisYearValue()
                        .replace(",", "")
                        .replace("HCF", "");
                lblHistogramMonths = getHistogramBarMonthLabelElements();
                for (WebElement element : lblHistogramMonths) {
                    waitForElementToBeVisible(element);
                    String histogramColor = getAttribute(element, "fill");
                    mouseHover(element);
                    String tooltip = getHistogramBarToolTip();
                    tooltip = tooltip.split(":")[1].trim();
                    Double usage = Double.parseDouble(tooltip.replace(",", ""));
                    if (usage <= (average / 2)) {
                        Assert.assertEquals(histogramColor, colorLowUsageDb);
                    }
                    else if (usage > (average / 2) && usage <= (average)) {
                        Assert.assertEquals(histogramColor, colorAvgUsageDb);
                    }
                    else if (usage > average) {
                        Assert.assertEquals(histogramColor, colorHighUsageDb);
                    }
                }
            }
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked water meter/meters.");
            }
        }
        // If there is no water meter linked
        else {
            ExtentLogger.logSkip("There is no water meter linked to the account.");
        }
    }

    /**
     * This is to verify the color logic for gas meters
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyGasUsageColorLogic(SoftAssert softAssert, Meter[] meters) {
        ResultSet resultSet = DataBaseUtils.getResultSet(SQLQueries.getConfigValue("Usage"));
        Map<String, String> legendColorsConfig = new HashMap<>();
        // Init currency config
        String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
        try {
            while (resultSet.next()) {
                legendColorsConfig.put(
                        resultSet.getString("ConfigOption"),
                        resultSet.getString("ConfigValue")
                );
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        String colorHighUsageDb = legendColorsConfig.get("High");
        String colorAvgUsageDb = legendColorsConfig.get("Mid");
        String colorLowUsageDb = legendColorsConfig.get("Low");
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate gas meters
        usageEndpoints.segregateGasMeters(meters);
        gasMeters = UsageEndpoints.gasMeters.toArray(new Meter[0]);
        // Check whether having gas meter or not
        if (gasMeters.length > 0) {
            ExtentLogger.logInfo("Gas meters are linked to the account.");
            // Verify gas tab should visible and selected by default
            Assert.assertTrue(isGasTabVisible(),
                    "Gas tab is not visible.");
            clickGasTabLink();
            homeSteps.waitForPageLoader();
            pause(1000);
            Assert.assertTrue(isGasTabActive(),
                    "Gas tab is not active by default.");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify legend colors for the measuring unit bars
                Assert.assertTrue(isCurrencyUnitLinkVisible(),
                        "Currency unit tab is not visible.");
                Assert.assertTrue(isCurrencyUnitLinkActive(),
                        "Currency unit tab is not active.");
                // Init the average unit
                String avgThisYear = getAverageThisYearValue()
                        .replace(",", "")
                        .replace(currencyConfig, "");
                Double average = Double.parseDouble(avgThisYear);
                List<WebElement> lblHistogramMonths = getHistogramBarMonthLabelElements();
                for (WebElement element : lblHistogramMonths) {
                    waitForElementToBeVisible(element);
                    String histogramColor = getAttribute(element, "fill");
                    mouseHover(element);
                    String tooltip = getHistogramBarToolTip();
                    tooltip = tooltip.split(":")[1].trim();
                    Double usage = Double.parseDouble(tooltip.replace(",", ""));
                    if (usage <= (average / 2)) {
                        Assert.assertEquals(histogramColor, colorLowUsageDb);
                    }
                    else if (usage > (average / 2) && usage <= (average)) {
                        Assert.assertEquals(histogramColor, colorAvgUsageDb);
                    }
                    else if (usage > average) {
                        Assert.assertEquals(histogramColor, colorHighUsageDb);
                    }
                }
                // Verify legend colors for the currency unit bars
                clickMeasuringUnitLink();
                homeSteps.waitForPageLoader();
                pause(1000);
                avgThisYear = getAverageThisYearValue()
                        .replace(",", "")
                        .replace("CCF", "");
                lblHistogramMonths = getHistogramBarMonthLabelElements();
                for (WebElement element : lblHistogramMonths) {
                    waitForElementToBeVisible(element);
                    String histogramColor = getAttribute(element, "fill");
                    mouseHover(element);
                    String tooltip = getHistogramBarToolTip();
                    tooltip = tooltip.split(":")[1].trim();
                    Double usage = Double.parseDouble(tooltip.replace(",", ""));
                    if (usage <= (average / 2)) {
                        Assert.assertEquals(histogramColor, colorLowUsageDb);
                    }
                    else if (usage > (average / 2) && usage <= (average)) {
                        Assert.assertEquals(histogramColor, colorAvgUsageDb);
                    }
                    else if (usage > average) {
                        Assert.assertEquals(histogramColor, colorHighUsageDb);
                    }
                }
            }
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked gas meter/meters.");
            }
        }
        // If there is no gas meter linked
        else {
            ExtentLogger.logSkip("There is no gas meter linked to the account.");
        }
    }

    /**
     * Verify average and highest for electric usage.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyAverageAndHighestForElectric(SoftAssert softAssert, User user, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate electric meters
        usageEndpoints.segregateElectricMeters(meters);
        electricMeters = UsageEndpoints.electricMeters.toArray(new Meter[0]);
        // Check whether having electric meter or not
        if (electricMeters.length > 0) {
            ExtentLogger.logInfo("Electric meters are linked to the account.");
            // Verify electric tab should visible and selected by default
            Assert.assertTrue(isElectricTabVisible(),
                    "Electric tab is not visible.");
            Assert.assertTrue(isElectricTabActive(),
                    "Electric tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verifying Monthly Interval Tab
            softAssert.assertTrue(isMeterDropDownVisible(),
                    "Meter drop-down is not visible for multiple meters.");
            // Verifying the Units tabs
            softAssert.assertTrue(isMeasuringUnitLinkVisible(),
                    "Measuring unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkVisible(),
                    "Currency unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkActive(),
                    "Currency unit tab is not active.");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify average this year tile.
                softAssert.assertEquals(getAverageThisYearLabel(),
                        usageTextProp.getPropValue("lblAverageThisYear"),
                        "Average this year label not matched."
                );
                softAssert.assertTrue(isAverageThisYearValueVisible(),
                        "Average this year is not visible.");
                softAssert.assertTrue(getAverageThisYearValue().contains(currencyConfig),
                        "Average This Year currency config is not same as CSP Currency config.");
                // Verify highest this year tile.
                softAssert.assertEquals(
                        getHighestThisYearLabel(),
                        usageTextProp.getPropValue("lblHighestThisYear"),
                        "Highest this year label not matched."
                );
                softAssert.assertTrue(isHighestThisYearValueVisible(),
                        "Highest this year is not visible.");
                softAssert.assertTrue(getHighestThisYearValue().contains(currencyConfig),
                        "Highest this Year currency config is not same as CSP Currency config.");
                // Init Average and Highest from the API
                TilesDetailResponse tilesDetailResponse = null;
                // Init Start Date and End Date
                String startDate = DateUtil.getStartDayCurrentMonth("yyyy-MM-dd");
                String endDate = DateUtil.getEndDayCurrentMonth("yyyy-MM-dd");
                // Init params
                UsageTilesParam tilesDetailsParam = new UsageTilesParam(
                        user.getDefaultUtilityAccNum(),
                        startDate,
                        endDate,
                        "1"
                );
                // Tiles details
                tilesDetailResponse = usageEndpoints.getTilesDetailsForElectric(
                        user,
                        tilesDetailsParam
                );
                // Verify monthly electric usage data for ALL meter scenario
                if (electricMeters.length > 1) {
                    ExtentLogger.logInfo("Number of electric meters linked to the account {} " + electricMeters.length);
                    // Checking the collection type
                    for (int i = 0; i < electricMeters.length; i++) {
                        if (electricMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("kWh"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("kWh"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertFalse(isDailyIntervalLinkVisible(),
                                "Daily interval is visible for non AMI combo.");
                        softAssert.assertFalse(isHourlyIntervalLinkVisible(),
                                "Hourly interval is visible for non AMI combo.");
                        softAssert.assertFalse(isMinutesIntervalLinkVisible(),
                                "Minutes interval is visible for non AMI combo.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("kWh"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("kWh"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        ExtentLogger.logPass("Verifications for Non AMI combo is passed successfully.");
                    }
                    // Check for single meter as well if its Multi-Meter case
                    String amiMeter = null;
                    String nonAmiMeter = null;
                    for (Meter meter : electricMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter present
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickCurrencyUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("kWh"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("kWh"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // If Non AMI meter present
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        clickCurrencyUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("kWh"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("kWh"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                    }
                }
                // Check if there is single meter linked to the account
                else if (electricMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (electricMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("kWh"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("kWh"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (electricMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("kWh"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("kWh"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked electric meter/meters.");
            }
        }
        // If there is no electric meter linked
        else {
            ExtentLogger.logSkip("There is no Electric meter linked to the account.");
        }
    }

    /**
     * Verify average and highest for water usage.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyAverageAndHighestForWater(SoftAssert softAssert, User user, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate water meters
        usageEndpoints.segregateWaterMeters(meters);
        waterMeters = UsageEndpoints.waterMeters.toArray(new Meter[0]);
        // Check whether having water meter or not
        if (waterMeters.length > 0) {
            ExtentLogger.logInfo("Water meters are linked to the account.");
            // Verify water tab should visible and selected by default
            Assert.assertTrue(isWaterTabVisible(),
                    "Water tab is not visible.");
            clickWaterTabLink();
            homeSteps.waitForPageLoader();
            pause(1000);
            Assert.assertTrue(isWaterTabActive(),
                    "Water tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verifying Monthly Interval Tab
            softAssert.assertTrue(isMeterDropDownVisible(),
                    "Meter drop-down is not visible for multiple meters.");
            // Verifying the Units tabs
            softAssert.assertTrue(isMeasuringUnitLinkVisible(),
                    "Measuring unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkVisible(),
                    "Currency unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkActive(),
                    "Currency unit tab is not active.");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify average this year tile.
                softAssert.assertEquals(getAverageThisYearLabel(),
                        usageTextProp.getPropValue("lblAverageThisYear"),
                        "Average this year label not matched."
                );
                softAssert.assertTrue(isAverageThisYearValueVisible(),
                        "Average this year is not visible.");
                softAssert.assertTrue(getAverageThisYearValue().contains(currencyConfig),
                        "Average This Year currency config is not same as CSP Currency config.");
                // Verify highest this year tile.
                softAssert.assertEquals(
                        getHighestThisYearLabel(),
                        usageTextProp.getPropValue("lblHighestThisYear"),
                        "Highest this year label not matched."
                );
                softAssert.assertTrue(isHighestThisYearValueVisible(),
                        "Highest this year is not visible.");
                softAssert.assertTrue(getHighestThisYearValue().contains(currencyConfig),
                        "Highest this Year currency config is not same as CSP Currency config.");
                // Init Average and Highest from the API
                TilesDetailResponse tilesDetailResponse = null;
                // Init Start Date and End Date
                String startDate = DateUtil.getStartDayCurrentMonth("yyyy-MM-dd");
                String endDate = DateUtil.getEndDayCurrentMonth("yyyy-MM-dd");
                // Init params
                UsageTilesParam tilesDetailsParam = new UsageTilesParam(
                        user.getDefaultUtilityAccNum(),
                        startDate,
                        endDate,
                        "1"
                );
                // Tiles details
                tilesDetailResponse = usageEndpoints.getTilesDetailsForWater(
                        user,
                        tilesDetailsParam
                );
                // Verify monthly water usage data for ALL meter scenario
                if (waterMeters.length > 1) {
                    ExtentLogger.logInfo("Number of water meters linked to the account {} " + waterMeters.length);
                    // Checking the collection type
                    for (int i = 0; i < waterMeters.length; i++) {
                        if (waterMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("HCF"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("HCF"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("HCF"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("HCF"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        ExtentLogger.logPass("Verifications for Non AMI combo is passed successfully.");
                    }
                    // Check for single meter as well if its Multi-Meter case
                    String amiMeter = null, nonAmiMeter = null;
                    for (Meter meter : waterMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickCurrencyUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("HCF"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("HCF"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        clickCurrencyUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("HCF"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("HCF"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                    }
                }
                // Check if there is single meter linked to the account
                else if (waterMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (waterMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("HCF"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("HCF"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo(
                                        "Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (waterMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        clickCurrencyUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("HCF"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("HCF"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked water meter/meters.");
            }
        }
        // If there is no water meter linked
        else {
            ExtentLogger.logSkip("There is no water meter linked to the account.");
        }
    }

    /**
     * Verify average and highest for gas usage.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyAverageAndHighestForGas(SoftAssert softAssert, User user, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate gas meters
        usageEndpoints.segregateGasMeters(meters);
        gasMeters = UsageEndpoints.gasMeters.toArray(new Meter[0]);
        // Check whether having gas meter or not
        if (gasMeters.length > 0) {
            ExtentLogger.logInfo("Gas meters are linked to the account.");
            // Verify gas tab should visible and selected by default
            Assert.assertTrue(isGasTabVisible(),
                    "Gas tab is not visible.");
            clickGasTabLink();
            homeSteps.waitForPageLoader();
            pause(1000);
            Assert.assertTrue(isGasTabActive(),
                    "Gas tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verifying Monthly Interval Tab
            softAssert.assertTrue(isMeterDropDownVisible(),
                    "Meter drop-down is not visible for multiple meters.");
            // Verifying the Units tabs
            softAssert.assertTrue(isMeasuringUnitLinkVisible(),
                    "Measuring unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkVisible(),
                    "Currency unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkActive(),
                    "Currency unit tab is not active.");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify average this year tile.
                softAssert.assertEquals(getAverageThisYearLabel(),
                        usageTextProp.getPropValue("lblAverageThisYear"),
                        "Average this year label not matched."
                );
                softAssert.assertTrue(isAverageThisYearValueVisible(),
                        "Average this year is not visible.");
                softAssert.assertTrue(getAverageThisYearValue().contains(currencyConfig),
                        "Average This Year currency config is not same as CSP Currency config.");
                // Verify highest this year tile.
                softAssert.assertEquals(
                        getHighestThisYearLabel(),
                        usageTextProp.getPropValue("lblHighestThisYear"),
                        "Highest this year label not matched."
                );
                softAssert.assertTrue(isHighestThisYearValueVisible(),
                        "Highest this year is not visible.");
                softAssert.assertTrue(getHighestThisYearValue().contains(currencyConfig),
                        "Highest this Year currency config is not same as CSP Currency config.");
                // Init Average and Highest from the API
                TilesDetailResponse tilesDetailResponse = null;
                // Init Start Date and End Date
                String startDate = DateUtil.getStartDayCurrentMonth("yyyy-MM-dd");
                String endDate = DateUtil.getEndDayCurrentMonth("yyyy-MM-dd");
                // Init params
                UsageTilesParam tilesDetailsParam = new UsageTilesParam(
                        user.getDefaultUtilityAccNum(),
                        startDate,
                        endDate,
                        "1"
                );
                // Tiles details
                tilesDetailResponse = usageEndpoints.getTilesDetailsForGas(
                        user,
                        tilesDetailsParam
                );
                // Verify monthly gas usage data for ALL meter scenario
                if (gasMeters.length > 1) {
                    ExtentLogger.logInfo("Number of gas meters linked to the account {} " + gasMeters.length);
                    // Checking the collection type
                    for (int i = 0; i < gasMeters.length; i++) {
                        if (gasMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("CCF"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("CCF"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                Assert.assertEquals(
                                        actAverage.replace(",", "")
                                                .replace(currencyConfig, ""),
                                        expAverage,
                                        "Average this year value not matched."
                                );
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                actHighest = getHighestThisYearValue();
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                Assert.assertEquals(
                                        actHighest.replace(currencyConfig, "")
                                                .replace(",", ""),
                                        expHighest,
                                        "Highest this year value not matched."
                                );
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                Assert.assertEquals(
                                        actAverage.replace("kWh", "").replace(",", ""),
                                        expAverage,
                                        "Average this year value not matched."
                                );
                                Assert.assertTrue(actAverage.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                actHighest = getHighestThisYearValue();
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                Assert.assertEquals(
                                        actHighest.replace("kWh", "").replace(",", ""),
                                        expHighest,
                                        "Highest this year value not matched."
                                );
                                Assert.assertTrue(actHighest.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // If meters combo is Non AMI
                    else {
                        ExtentLogger.logInfo("Meters combo is Non AMI because one or meters linked are Non AMI");
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("CCF"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("CCF"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        ExtentLogger.logPass("Verifications for Non AMI combo is passed successfully.");
                    }
                    // Check for single meter as well if its Multi-Meter case
                    String amiMeter = null, nonAmiMeter = null;
                    for (Meter meter : gasMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                        else if (meter.getIsAmi() == 0)
                            nonAmiMeter = meter.getMeterNumber();
                    }
                    // If AMI meter present
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickCurrencyUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("CCF"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("CCF"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // If Non AMI meter present
                    if (nonAmiMeter != null) {
                        // Select Non AMI Meter
                        selectMeterByVisibleText(nonAmiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        clickCurrencyUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("CCF"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("CCF"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                    }
                }
                // Check if there is single meter linked to the account
                else if (gasMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (gasMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("CCF"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("CCF"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying the average and highest unit and the data
                                ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                                // Verifying for the currency unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearAmount();
                                actAverage = actAverage.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actHighest = actHighest.replace(currencyConfig, "")
                                        .replace(",", "");
                                expHighest = tilesDetailResponse.getHighestThisYearAmount();
                                MathUtil.assertDifference(actHighest, expHighest);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actAverage = getAverageThisYearValue();
                                Assert.assertTrue(actAverage.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                                actAverage = actAverage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actAverage, expAverage);
                                actHighest = getHighestThisYearValue();
                                Assert.assertTrue(actHighest.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                                actHighest = actHighest.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actHighest, expHighest);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // Check if the single meter linked is Non AMI
                    else if (gasMeters[0].getIsAmi() == 0) {
                        ExtentLogger.logInfo("The meter linked is Non AMI. Verifying the UI as per Non AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expAverage = tilesDetailResponse.getAverageThisYearAmount();
                        actAverage = actAverage.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        String actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actHighest = actHighest.replace(currencyConfig, "")
                                .replace(",", "");
                        String expHighest = tilesDetailResponse.getHighestThisYearAmount();
                        MathUtil.assertDifference(actHighest, expHighest);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actAverage = getAverageThisYearValue();
                        Assert.assertTrue(actAverage.contains("CCF"),
                                "Measuring unit is not matched for average this year.");
                        expAverage = tilesDetailResponse.getAverageThisYearConsumption();
                        actAverage = actAverage.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actAverage, expAverage);
                        actHighest = getHighestThisYearValue();
                        Assert.assertTrue(actHighest.contains("CCF"),
                                "Measuring unit is not matched for highest this year.");
                        expHighest = tilesDetailResponse.getHighestThisYearConsumption();
                        actHighest = actHighest.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actHighest, expHighest);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked gas meter/meters.");
            }
        }
        // If there is no gas meter linked
        else {
            ExtentLogger.logSkip("There is no gas meter linked to the account.");
        }
    }

    /**
     * Verify average and highest for electric usage.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyProjectedSoFarForElectric(SoftAssert softAssert, User user, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate electric meters
        usageEndpoints.segregateElectricMeters(meters);
        electricMeters = UsageEndpoints.electricMeters.toArray(new Meter[0]);
        // Check whether having electric meter or not
        if (electricMeters.length > 0) {
            ExtentLogger.logInfo("Electric meters are linked to the account.");
            // Verify electric tab should visible and selected by default
            Assert.assertTrue(isElectricTabVisible(),
                    "Electric tab is not visible.");
            Assert.assertTrue(isElectricTabActive(),
                    "Electric tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verifying Monthly Interval Tab
            softAssert.assertTrue(isMeterDropDownVisible(),
                    "Meter drop-down is not visible for multiple meters.");
            // Verifying the Units tabs
            softAssert.assertTrue(isMeasuringUnitLinkVisible(),
                    "Measuring unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkVisible(),
                    "Currency unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkActive(),
                    "Currency unit tab is not active.");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify average this year tile.
                softAssert.assertEquals(getAverageThisYearLabel(),
                        usageTextProp.getPropValue("lblAverageThisYear"),
                        "Average this year label not matched."
                );
                softAssert.assertTrue(isAverageThisYearValueVisible(),
                        "Average this year is not visible.");
                softAssert.assertTrue(getAverageThisYearValue().contains(currencyConfig),
                        "Average This Year currency config is not same as CSP Currency config.");
                // Verify highest this year tile.
                softAssert.assertEquals(
                        getHighestThisYearLabel(),
                        usageTextProp.getPropValue("lblHighestThisYear"),
                        "Highest this year label not matched."
                );
                softAssert.assertTrue(isHighestThisYearValueVisible(),
                        "Highest this year is not visible.");
                softAssert.assertTrue(getHighestThisYearValue().contains(currencyConfig),
                        "Highest this Year currency config is not same as CSP Currency config.");
                // Init Average and Highest from the API
                TilesDetailResponse tilesDetailResponse = null;
                // Init Start Date and End Date
                String startDate = DateUtil.getStartDayCurrentMonth("yyyy-MM-dd");
                String endDate = DateUtil.getEndDayCurrentMonth("yyyy-MM-dd");
                // Init params
                UsageTilesParam tilesDetailsParam = new UsageTilesParam(
                        user.getDefaultUtilityAccNum(),
                        startDate,
                        endDate,
                        "1"
                );
                // Tiles details
                tilesDetailResponse = usageEndpoints.getTilesDetailsForElectric(
                        user,
                        tilesDetailsParam
                );
                // Verify monthly electric usage data for ALL meter scenario
                if (electricMeters.length > 1) {
                    ExtentLogger.logInfo("Number of electric meters linked to the account {} " + electricMeters.length);
                    // Checking the collection type
                    for (int i = 0; i < electricMeters.length; i++) {
                        if (electricMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                        actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        String actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                .replace(",", "");
                        String expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains("kWh"),
                                "Measuring unit is not matched for average this year.");
                        expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                        actSoFarThisMonth = actSoFarThisMonth.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains("kWh"),
                                "Measuring unit is not matched for highest this year.");
                        expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                        actProjectedUsage = actProjectedUsage.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // Check for single meter as well if its Multi-Meter case
                    String amiMeter = null;
                    for (Meter meter : electricMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                    }
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        if (!isCurrencyUnitLinkActive()) {
                            clickCurrencyUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(1000);
                        }
                        // Verifying for the currency unit
                        String actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                        actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        String actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                .replace(",", "");
                        String expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains("kWh"),
                                "Measuring unit is not matched for average this year.");
                        expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                        actSoFarThisMonth = actSoFarThisMonth.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains("kWh"),
                                "Measuring unit is not matched for highest this year.");
                        expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                        actProjectedUsage = actProjectedUsage.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                }
                // Check if there is single meter linked to the account
                else if (electricMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (electricMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyElectricBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Verifying for the currency unit
                        String actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                        actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        String actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                .replace(",", "");
                        String expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains("kWh"),
                                "Measuring unit is not matched for average this year.");
                        expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                        actSoFarThisMonth = actSoFarThisMonth.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains("kWh"),
                                "Measuring unit is not matched for highest this year.");
                        expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                        actProjectedUsage = actProjectedUsage.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("kWh"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("kWh"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("kWh", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked electric meter/meters.");
            }
        }
        // If there is no electric meter linked
        else {
            ExtentLogger.logSkip("There is no Electric meter linked to the account.");
        }
    }

    /**
     * Verify average and highest for water usage.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyProjectedSoFarForWater(SoftAssert softAssert, User user, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate water meters
        usageEndpoints.segregateWaterMeters(meters);
        waterMeters = UsageEndpoints.waterMeters.toArray(new Meter[0]);
        // Check whether having water meter or not
        if (waterMeters.length > 0) {
            ExtentLogger.logInfo("Water meters are linked to the account.");
            // Verify water tab should visible and selected by default
            Assert.assertTrue(isWaterTabVisible(),
                    "Water tab is not visible.");
            clickWaterTabLink();
            homeSteps.waitForPageLoader();
            pause(1000);
            Assert.assertTrue(isWaterTabActive(),
                    "Water tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verifying Monthly Interval Tab
            softAssert.assertTrue(isMeterDropDownVisible(),
                    "Meter drop-down is not visible for multiple meters.");
            // Verifying the Units tabs
            softAssert.assertTrue(isMeasuringUnitLinkVisible(),
                    "Measuring unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkVisible(),
                    "Currency unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkActive(),
                    "Currency unit tab is not active.");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify average this year tile.
                softAssert.assertEquals(getAverageThisYearLabel(),
                        usageTextProp.getPropValue("lblAverageThisYear"),
                        "Average this year label not matched."
                );
                softAssert.assertTrue(isAverageThisYearValueVisible(),
                        "Average this year is not visible.");
                softAssert.assertTrue(getAverageThisYearValue().contains(currencyConfig),
                        "Average This Year currency config is not same as CSP Currency config.");
                // Verify highest this year tile.
                softAssert.assertEquals(
                        getHighestThisYearLabel(),
                        usageTextProp.getPropValue("lblHighestThisYear"),
                        "Highest this year label not matched."
                );
                softAssert.assertTrue(isHighestThisYearValueVisible(),
                        "Highest this year is not visible.");
                softAssert.assertTrue(getHighestThisYearValue().contains(currencyConfig),
                        "Highest this Year currency config is not same as CSP Currency config.");
                // Init Average and Highest from the API
                TilesDetailResponse tilesDetailResponse = null;
                // Init Start Date and End Date
                String startDate = DateUtil.getStartDayCurrentMonth("yyyy-MM-dd");
                String endDate = DateUtil.getEndDayCurrentMonth("yyyy-MM-dd");
                // Init params
                UsageTilesParam tilesDetailsParam = new UsageTilesParam(
                        user.getDefaultUtilityAccNum(),
                        startDate,
                        endDate,
                        "1"
                );
                // Tiles details
                tilesDetailResponse = usageEndpoints.getTilesDetailsForWater(
                        user,
                        tilesDetailsParam
                );
                // Verify monthly water usage data for ALL meter scenario
                if (waterMeters.length > 1) {
                    ExtentLogger.logInfo("Number of water meters linked to the account {} " + waterMeters.length);
                    // Checking the collection type
                    for (int i = 0; i < waterMeters.length; i++) {
                        if (waterMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                        actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        String actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                .replace(",", "");
                        String expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains("HCF"),
                                "Measuring unit is not matched for average this year.");
                        expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                        actSoFarThisMonth = actSoFarThisMonth.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains("HCF"),
                                "Measuring unit is not matched for highest this year.");
                        expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                        actProjectedUsage = actProjectedUsage.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // Check for single meter as well if its Multi-Meter case
                    String amiMeter = null;
                    for (Meter meter : waterMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                    }
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        if (!isCurrencyUnitLinkActive()) {
                            clickCurrencyUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(1000);
                        }
                        // Verifying for the currency unit
                        String actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                        actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        String actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                .replace(",", "");
                        String expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains("HCF"),
                                "Measuring unit is not matched for average this year.");
                        expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                        actSoFarThisMonth = actSoFarThisMonth.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains("HCF"),
                                "Measuring unit is not matched for highest this year.");
                        expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                        actProjectedUsage = actProjectedUsage.replace("HCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                }
                // Check if there is single meter linked to the account
                else if (waterMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (waterMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Verifying for the currency unit
                        String actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                        actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        String actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                .replace(",", "");
                        String expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains("kWh"),
                                "Measuring unit is not matched for average this year.");
                        expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                        actSoFarThisMonth = actSoFarThisMonth.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains("kWh"),
                                "Measuring unit is not matched for highest this year.");
                        expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                        actProjectedUsage = actProjectedUsage.replace("kWh", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("HCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("HCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("HCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked water meter/meters.");
            }
        }
        // If there is no water meter linked
        else {
            ExtentLogger.logSkip("There is no water meter linked to the account.");
        }
    }

    /**
     * Verify average and highest for gas usage.
     *
     * @param softAssert to soft assert all the validations.
     * @param meters     meter array model linked to the account.
     */
    public void verifyProjectedSoFarForGas(SoftAssert softAssert, User user, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate gas meters
        usageEndpoints.segregateGasMeters(meters);
        gasMeters = UsageEndpoints.gasMeters.toArray(new Meter[0]);
        // Check whether having gas meter or not
        if (gasMeters.length > 0) {
            ExtentLogger.logInfo("Gas meters are linked to the account.");
            // Verify gas tab should visible and selected by default
            Assert.assertTrue(isGasTabVisible(),
                    "Gas tab is not visible.");
            clickGasTabLink();
            homeSteps.waitForPageLoader();
            pause(1000);
            Assert.assertTrue(isGasTabActive(),
                    "Gas tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verifying Monthly Interval Tab
            softAssert.assertTrue(isMeterDropDownVisible(),
                    "Meter drop-down is not visible for multiple meters.");
            // Verifying the Units tabs
            softAssert.assertTrue(isMeasuringUnitLinkVisible(),
                    "Measuring unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkVisible(),
                    "Currency unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkActive(),
                    "Currency unit tab is not active.");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify average this year tile.
                softAssert.assertEquals(getAverageThisYearLabel(),
                        usageTextProp.getPropValue("lblAverageThisYear"),
                        "Average this year label not matched."
                );
                softAssert.assertTrue(isAverageThisYearValueVisible(),
                        "Average this year is not visible.");
                softAssert.assertTrue(getAverageThisYearValue().contains(currencyConfig),
                        "Average This Year currency config is not same as CSP Currency config.");
                // Verify highest this year tile.
                softAssert.assertEquals(
                        getHighestThisYearLabel(),
                        usageTextProp.getPropValue("lblHighestThisYear"),
                        "Highest this year label not matched."
                );
                softAssert.assertTrue(isHighestThisYearValueVisible(),
                        "Highest this year is not visible.");
                softAssert.assertTrue(getHighestThisYearValue().contains(currencyConfig),
                        "Highest this Year currency config is not same as CSP Currency config.");
                // Init Average and Highest from the API
                TilesDetailResponse tilesDetailResponse = null;
                // Init Start Date and End Date
                String startDate = DateUtil.getStartDayCurrentMonth("yyyy-MM-dd");
                String endDate = DateUtil.getEndDayCurrentMonth("yyyy-MM-dd");
                // Init params
                UsageTilesParam tilesDetailsParam = new UsageTilesParam(
                        user.getDefaultUtilityAccNum(),
                        startDate,
                        endDate,
                        "1"
                );
                // Tiles details
                tilesDetailResponse = usageEndpoints.getTilesDetailsForGas(
                        user,
                        tilesDetailsParam
                );
                // Verify monthly gas usage data for ALL meter scenario
                if (gasMeters.length > 1) {
                    ExtentLogger.logInfo("Number of gas meters linked to the account {} " + gasMeters.length);
                    // Checking the collection type
                    for (int i = 0; i < gasMeters.length; i++) {
                        if (gasMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Verifying the average and highest unit and the data
                        ExtentLogger.logInfo("Verifying the average and the highest unit and the data for monthly ALL.");
                        // Verifying for the currency unit
                        String actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                        actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        String actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                .replace(",", "");
                        String expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains("CCF"),
                                "Measuring unit is not matched for average this year.");
                        expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                        actSoFarThisMonth = actSoFarThisMonth.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains("CCF"),
                                "Measuring unit is not matched for highest this year.");
                        expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                        actProjectedUsage = actProjectedUsage.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // Check for single meter as well if its Multi-Meter case
                    String amiMeter = null;
                    for (Meter meter : gasMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                    }
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        if (!isCurrencyUnitLinkActive()) {
                            clickCurrencyUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(1000);
                        }
                        // Verifying for the currency unit
                        String actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                        actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        String actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                .replace(",", "");
                        String expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains("CCF"),
                                "Measuring unit is not matched for average this year.");
                        expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                        actSoFarThisMonth = actSoFarThisMonth.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains("CCF"),
                                "Measuring unit is not matched for highest this year.");
                        expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                        actProjectedUsage = actProjectedUsage.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                }
                // Check if there is single meter linked to the account
                else if (gasMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (gasMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        // Verifying for the currency unit
                        String actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                "Currency unit is not matched for average this year.");
                        String expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                        actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                .replace(currencyConfig, "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        String actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                "Currency unit is not matched for highest this year.");
                        actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                .replace(",", "");
                        String expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        // Change view to the measuring unit
                        clickMeasuringUnitLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for the measuring unit
                        actSoFarThisMonth = getSoFarThisValueMonth();
                        Assert.assertTrue(actSoFarThisMonth.contains("CCF"),
                                "Measuring unit is not matched for average this year.");
                        expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                        actSoFarThisMonth = actSoFarThisMonth.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                        actProjectedUsage = getProjectedUsageValue();
                        Assert.assertTrue(actProjectedUsage.contains("CCF"),
                                "Measuring unit is not matched for highest this year.");
                        expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                        actProjectedUsage = actProjectedUsage.replace("CCF", "")
                                .replace(",", "");
                        MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                        ExtentLogger.logPass(
                                "Verified successfully the average and the highest unit and the data for monthly ALL.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                        }
                        clickMinutesIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for minutes intervals
                        if (isMinutesIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                clickCurrencyUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the currency unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains(currencyConfig),
                                        "Currency unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedAmount();
                                actSoFarThisMonth = actSoFarThisMonth.replace(",", "")
                                        .replace(currencyConfig, "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains(currencyConfig),
                                        "Currency unit is not matched for highest this year.");
                                actProjectedUsage = actProjectedUsage.replace(currencyConfig, "")
                                        .replace(",", "");
                                expProjectedUsage = tilesDetailResponse.getProjectedAmount();
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                // Change view to the measuring unit
                                clickMeasuringUnitLink();
                                homeSteps.waitForPageLoader();
                                pause(1000);
                                // Verifying for the measuring unit
                                actSoFarThisMonth = getSoFarThisValueMonth();
                                Assert.assertTrue(actSoFarThisMonth.contains("CCF"),
                                        "Measuring unit is not matched for average this year.");
                                expSoFarThisMonth = tilesDetailResponse.getSoFarThisMonthProjectedConsumption();
                                actSoFarThisMonth = actSoFarThisMonth.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actSoFarThisMonth, expSoFarThisMonth);
                                actProjectedUsage = getProjectedUsageValue();
                                Assert.assertTrue(actProjectedUsage.contains("CCF"),
                                        "Measuring unit is not matched for highest this year.");
                                expProjectedUsage = tilesDetailResponse.getProjectedConsumption();
                                actProjectedUsage = actProjectedUsage.replace("CCF", "")
                                        .replace(",", "");
                                MathUtil.assertDifference(actProjectedUsage, expProjectedUsage);
                                ExtentLogger.logPass(
                                        "Verified successfully the average and the highest unit and the data for monthly ALL.");
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked gas meter/meters.");
            }
        }
        // If there is no gas meter linked
        else {
            ExtentLogger.logSkip("There is no gas meter linked to the account.");
        }
    }

    public void verifyElectricWeatherOverlayData(SoftAssert softAssert, User user, Meter[] meters) {
        // Init home steps
        HomeSteps homeSteps = new HomeSteps(driver);
        // Init usage endpoints
        UsageEndpoints usageEndpoints = new UsageEndpoints();
        // Segregate electric meters
        usageEndpoints.segregateElectricMeters(meters);
        electricMeters = UsageEndpoints.electricMeters.toArray(new Meter[0]);
        // Check whether having electric meter or not
        if (electricMeters.length > 0) {
            ExtentLogger.logInfo("Electric meters are linked to the account.");
            // Verify electric tab should visible and selected by default
            Assert.assertTrue(isElectricTabVisible(),
                    "Electric tab is not visible.");
            Assert.assertTrue(isElectricTabActive(),
                    "Electric tab is not active by default.");
            // Init currency config
            String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
            // Verifying Monthly Interval Tab
            softAssert.assertTrue(isMeterDropDownVisible(),
                    "Meter drop-down is not visible for multiple meters.");
            // Verifying the Units tabs
            softAssert.assertTrue(isMeasuringUnitLinkVisible(),
                    "Measuring unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkVisible(),
                    "Currency unit tab not visible.");
            softAssert.assertTrue(isCurrencyUnitLinkActive(),
                    "Currency unit tab is not active.");
            // Verify no data present label visibility
            Boolean isDataNotAvailable = isDataNotAvailableLabelVisible();
            if (!isDataNotAvailable) {
                // Verify average this year tile.
                softAssert.assertEquals(getAverageThisYearLabel(),
                        usageTextProp.getPropValue("lblAverageThisYear"),
                        "Average this year label not matched."
                );
                softAssert.assertTrue(isAverageThisYearValueVisible(),
                        "Average this year is not visible.");
                softAssert.assertTrue(getAverageThisYearValue().contains(currencyConfig),
                        "Average This Year currency config is not same as CSP Currency config.");
                // Verify highest this year tile.
                softAssert.assertEquals(
                        getHighestThisYearLabel(),
                        usageTextProp.getPropValue("lblHighestThisYear"),
                        "Highest this year label not matched."
                );
                softAssert.assertTrue(isHighestThisYearValueVisible(),
                        "Highest this year is not visible.");
                softAssert.assertTrue(getHighestThisYearValue().contains(currencyConfig),
                        "Highest this Year currency config is not same as CSP Currency config.");
                // Init Weather Overlay Params
                WeatherOverlayParams weatherOverlayParams = new WeatherOverlayParams();
                weatherOverlayParams.setWeatherType("d");
                String fromDate = DateUtil.getBackDateByGivenDays("yyyy-MM-dd", 30);
                weatherOverlayParams.setWeatherFromDate(fromDate);
                String toDate = DateUtil.getBackDateByGivenDays("yyyy-MM-dd", 1);
                weatherOverlayParams.setWeatherToDate(toDate);
                ResultSet resultSet = DataBaseUtils.getResultSet(SQLQueries
                        .getCustomerAddressDetails(user.getDefaultUtilityAccNum()));
                try {
                    resultSet.next();
                    weatherOverlayParams.setCityName(resultSet.getString("cityname"));
                    weatherOverlayParams.setStateName(resultSet.getString("statename"));
                    weatherOverlayParams.setCountryName(resultSet.getString("country"));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                // Fetching the weather data
                WeatherDataResponse[] weatherDataResponses = usageEndpoints.getWeatherData(user, weatherOverlayParams);
                // Verify monthly electric usage data for ALL meter scenario
                if (electricMeters.length > 1) {
                    ExtentLogger.logInfo("Number of electric meters linked to the account {} " + electricMeters.length);
                    // Checking the collection type
                    for (int i = 0; i < electricMeters.length; i++) {
                        if (electricMeters[i].getIsAmi() == 0)
                            isComboAMI = false;
                    }
                    // Verifying for monthly intervals
                    softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                            "Monthly interval by default not selected.");
                    // Verifying whether the combo is AMI or not
                    if (isComboAMI) {
                        ExtentLogger.logInfo("Meters combo is AMI because all meters linked are AMI");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                Assert.assertTrue(isWeatherOverlayToggleVisible(),
                                        "Weather overlay toggle not visible.");
                                // TODO -- To Implement the locator for weather
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // TODO -- To Implement the locator for weather
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                    // Check for single meter as well if its Multi-Meter case
                    String amiMeter = null;
                    for (Meter meter : electricMeters) {
                        if (meter.getIsAmi() == 1)
                            amiMeter = meter.getMeterNumber();
                    }
                    if (amiMeter != null) {
                        // Select AMI Meter
                        selectMeterByVisibleText(amiMeter);
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        if (!isCurrencyUnitLinkActive()) {
                            clickCurrencyUnitLink();
                            homeSteps.waitForPageLoader();
                            pause(1000);
                        }
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // TODO -- To Implement the locator for weather
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // TODO -- To Implement the locator for weather
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                    }
                }
                // Check if there is single meter linked to the account
                else if (electricMeters.length == 1) {
                    ExtentLogger.logInfo("There is only 1 meter linked to the account.");
                    // Check if the single meter linked is AMI
                    if (electricMeters[0].getIsAmi() == 1) {
                        ExtentLogger.logInfo("The meter linked is AMI. Verifying the UI as per AMI meter.");
                        // Verifying for monthly intervals
                        softAssert.assertTrue(isMonthlyIntervalLinkActive(),
                                "Monthly interval by default not selected.");
                        verifyElectricBarChartSection(softAssert, currencyConfig, "monthly");
                        // Verifying other interval tabs than monthly.
                        softAssert.assertTrue(isDailyIntervalLinkVisible(),
                                "Daily interval is not visible for AMI combo.");
                        softAssert.assertTrue(isHourlyIntervalLinkVisible(),
                                "Hourly interval is not visible for AMI combo.");
                        softAssert.assertTrue(isMinutesIntervalLinkVisible(),
                                "Minutes interval is not visible for AMI combo.");
                        clickDailyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for daily intervals
                        if (isDailyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // TODO -- To Implement the locator for weather
                            }
                            else {
                                softAssert.assertEquals(getDataNotAvailableLabel(),
                                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                                        "No usage data label not matched."
                                );
                            }
                        }
                        clickHourlyIntervalLink();
                        homeSteps.waitForPageLoader();
                        pause(1000);
                        // Verifying for hourly intervals
                        if (isHourlyIntervalLinkActive()) {
                            isDataNotAvailable = isDataNotAvailableLabelVisible();
                            if (!isDataNotAvailable) {
                                // TODO -- To Implement the locator for weather
                            }
                        }
                    }
                }
            }
            // If there is no data present for the meter linked to the account.
            else {
                softAssert.assertEquals(getDataNotAvailableLabel(),
                        usageTextProp.getPropValue("lblNoUsageDataPresent"),
                        "No usage data label not matched."
                );
                softAssert.assertFalse(isAverageThisYearValueVisible(),
                        "Average this year is visible even if the data is not there.");
                softAssert.assertFalse(isHighestThisYearValueVisible(),
                        "Highest this year is visible even if the data is not there.");
                softAssert.assertFalse(isSoFarThisMonthTileVisible(),
                        "So Far This month is visible even if the data is not there.");
                softAssert.assertFalse(isProjectedUsageTileVisible(),
                        "Projected usage tile is visible even if the data is not there.");
                ExtentLogger.logInfo("There is no data present for the linked electric meter/meters.");
            }
        }
        // If there is no electric meter linked
        else {
            ExtentLogger.logSkip("There is no Electric meter linked to the account.");
        }
    }

    /**
     * Select given date in calendar on usage screen.
     *
     * @param date give date to select in calendar.
     */
    public void selectGivenDateInCalendar(String date) {
        // OPEN CALENDAR POP UP
        clickCalendarLabel();
        // SELECT THE PERIOD FOR WHICH USER HAVE DAILY DATA
        int monthAPI = Integer.parseInt(date.split("-")[1].trim());
        int dayAPI = Integer.parseInt(date.split("-")[2].trim());
        String monthCalendar = getMonthOnCalendarLabel().split(" ")[0];
        int monthCal = DateUtil.getMonthValue(monthCalendar);
        // SHIFTING MONTHS
        int shift = 0;
        if (monthAPI != monthCal) {
            shift = monthCal - monthAPI;
        }
        for (int i = 0; i < shift; i++) {
            clickCalendarPrevButton();
        }
        // VERIFYING MONTH IS SHIFTED ACCORDINGLY
        monthCalendar = getMonthOnCalendarLabel();
        monthCal = DateUtil.getMonthValue(monthCalendar);
        Assert.assertEquals(monthAPI, monthCal, "Months not shifted correctly.");
        // SELECT THE EXACT DATE
        String dynamicDateLocator = ".datepicker-grid [data-value='" + dayAPI + "']";
        // CLICK THE DATE
        click(getWebElement(By.cssSelector(dynamicDateLocator)));
        HomeSteps homeSteps = new HomeSteps(driver);
        homeSteps.waitForPageLoader();
        pause(1000);
    }

    /**
     * This method get the histogram labels and values
     *
     * @return map containing labels and values on the bar chart.
     */
    public LinkedHashMap<String, String> getHistogramBarLabelsWithMonths() {
        LinkedHashMap<String, String> tooltips = new LinkedHashMap<>();
        List<String> lblHistogramMonths = getHistogramMonthsLabel();
        int counter = 0;
        for (WebElement element : getHistogramBarUnitLabelElements()) {
            waitForElementToBeVisible(element);
            mouseHover(element);
            String tooltip = getHistogramBarToolTip();
            tooltip = tooltip.split(":")[1].trim();
            String month = lblHistogramMonths.get(counter);
            tooltips.put(month, tooltip);
            counter++;
        }
        return tooltips;
    }

    /**
     * Compare Monthly interval data with exported excel.
     *
     * @param consumptionsAmountUI
     * @param meters
     * @param unit
     */
    public static void compareMonthlyUsageExcel(LinkedHashMap<String, String> consumptionsAmountUI, Meter[] meters,
                                                String unit) {
        // Init currency config
        String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
        String usageFileName = FilePaths.DOWNLOAD_PATH + FileUtil.getFileWithPartialName("Usage");
        List<String> meterList = new ArrayList<>();
        for (Meter value : meters) {
            meterList.add(value.getMeterNumber());
        }
        String meterNumbers = "Meter Number: " + StringUtil.addCommaToArrayList(meterList);
        int decimalPlaces = CSPConfiguration.initDecimalPlaceConfigCsp();
        // Make connection with file.
        openExcelFile(usageFileName);
        // Get sheet
        sheet = getSheetName(0);
        int rowCount = getRowCount();
        String cellMeterValue = getCellValue(0, 0);
        String[] meterNumber = meterNumbers.split(":")[1].split(",");
        for (String meter : meterNumber) {
            Assert.assertTrue(cellMeterValue.contains(meter.trim()), "Meter Number Value " + meterNumbers
                    + " does not match with the imported excel Meter Numbers " + cellMeterValue);
        }
        String cellMonthYear = getCellValue(4, 0);
        Assert.assertEquals(cellMonthYear, "Month, Year",
                "The Month and year column name does not match with the imported excel Month and Year: "
                        + cellMonthYear);
        String cellUnitsConsumed;
        // Verifying units consumed
        if (unit.equals("kWh")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedKwh"),
                    "The column name Units Consumed (kWh) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("HCF")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedHCF"),
                    "The column name Units Consumed (HCF) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("Gallon")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedGal"),
                    "The column name Units Consumed (Gal) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("CCF")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedCCF"),
                    "The column name Units Consumed (CCF) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("Dollar")) {
            cellUnitsConsumed = getCellValue(4, 1);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblAmountHeader")
                            .replace("currencyConfig", currencyConfig),
                    "The column name Cost($) does not match with the imported excel."
                            + cellUnitsConsumed);
        }
        int row = 5;
        // Verifying the consumptions and amount
        for (Map.Entry<String, String> entry : consumptionsAmountUI.entrySet()) {
            String expMonth = entry.getKey();
            String expConsumeOrAmount = entry.getValue();
            String actMonth = getCellStringValueWithOutSpecialChar(row, 0).trim();
            actMonth = DateUtil.convertIntoSpecificDateFormat(actMonth, "MMM, yyyy",
                    "MMM yyyy");
            Assert.assertEquals(actMonth, expMonth,
                    "Month not matched of UI with the Excel at iteration: " + (row - 5));
            if (unit.contains("Dollar")) {
                String actAmount = getCellStringValue(row, 1)
                        .replaceAll("[,'" + currencyConfig + "']", "");
                Double amountExcel = Double.parseDouble(actAmount);
                Double amountUI = Double.parseDouble(expConsumeOrAmount);
                MathUtil.assertDifference(amountExcel, amountUI);
                ExtentLogger.logInfo("Verify that 'Excel' file is downloaded containing the data " +
                        "format same as configured from CSP.");
            }
            else if (unit.equals("kWh") || unit.equals("HCF") || unit.equals("Gallon") || unit.equals("CCF")) {
                Double actConsumption = getDoubleCellValue(row, 2);
                Double expConsumption = Double.parseDouble(expConsumeOrAmount);
                MathUtil.assertDifference(actConsumption, expConsumption);
                ExtentLogger.logInfo("Verify that 'Excel' file is downloaded containing the data " +
                        "format same as configured from CSP.");
                int decimalExcel = MathUtil.getCountAfterDecimalPoint(MathUtil.toRoundoff(Double
                        .parseDouble(expConsumeOrAmount)));
                Assert.assertEquals(decimalExcel, decimalPlaces, decimalExcel + "values is not equal with "
                        + decimalPlaces);
            }
            row++;
        }
        // CLOSING THE CONNECTION
        closeConnectionWithExcel();
    }

    /**
     * Compare Daily interval data with exported excel.
     *
     * @param consumptionsAmountUI
     * @param meters
     * @param unit
     */
    public static void compareDailyUsageExcel(LinkedHashMap<String, String> consumptionsAmountUI, Meter[] meters,
                                              String unit) {
        // Init currency config
        String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
        String usageFileName = FilePaths.DOWNLOAD_PATH + FileUtil.getFileWithPartialName("Usage");
        List<String> meterList = new ArrayList<>();
        for (Meter value : meters) {
            meterList.add(value.getMeterNumber());
        }
        String meterNumbers = "Meter Number: " + StringUtil.addCommaToArrayList(meterList);
        int decimalPlaces = CSPConfiguration.initDecimalPlaceConfigCsp();
        // MAKE CONNECTION WITH EXCEL FILE
        openExcelFile(usageFileName);
        sheet = getSheetName(0);
        int rowCount = getRowCount();
        String cellMeterValue = getCellValue(0, 0);
        Assert.assertTrue(cellMeterValue.equals(meterNumbers), "Meter Number Value " + meterNumbers
                + " does not match with the imported excel Meter Numbers" + cellMeterValue);
        // Usage date column name
        String cellUsageDate = getCellValue(4, 0);
        Assert.assertEquals(cellUsageDate, "Usage Date",
                "The Usage Date column name does not match with the imported excel Usage Date: "
                        + cellUsageDate);
        // Verifying units consumed
        String cellUnitsConsumed;
        // Verifying units consumed
        if (unit.equals("kWh")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedKwh"),
                    "The column name Units Consumed (kWh) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("HCF")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedHCF"),
                    "The column name Units Consumed (HCF) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("Gallon")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedGal"),
                    "The column name Units Consumed (Gal) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("CCF")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedCCF"),
                    "The column name Units Consumed (CCF) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("Dollar")) {
            cellUnitsConsumed = getCellValue(4, 1);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblAmountHeader")
                            .replace("currencyConfig", currencyConfig),
                    "The column name Cost($) does not match with the imported excel."
                            + cellUnitsConsumed);
        }
        int row = 5;
        // Verifying the consumptions and amount
        for (Map.Entry<String, String> entry : consumptionsAmountUI.entrySet()) {
            String expMonth = entry.getKey();
            String expConsumeOrAmount = entry.getValue();
            String actMonth = getCellStringValueWithOutSpecialChar(row, 0).trim();
            Assert.assertEquals(actMonth, expMonth,
                    "Month not matched of UI with the Excel at iteration: " + (row - 5));
            if (unit.contains("Dollar")) {
                String actAmount = getCellStringValue(row, 1)
                        .replaceAll("[,'" + currencyConfig + "']", "");
                Double amountExcel = Double.parseDouble(actAmount);
                Double amountUI = Double.parseDouble(expConsumeOrAmount);
                MathUtil.assertDifference(amountExcel, amountUI);
                ExtentLogger.logInfo("Verify that 'Excel' file is downloaded containing the data " +
                        "format same as configured from CSP.");
            }
            else if (unit.equals("kWh") || unit.equals("HCF") || unit.equals("Gallon") || unit.equals("CCF")) {
                Double actConsumption = getDoubleCellValue(row, 2);
                Double expConsumption = Double.parseDouble(expConsumeOrAmount);
                MathUtil.assertDifference(actConsumption, expConsumption);
                ExtentLogger.logInfo("Verify that 'Excel' file is downloaded containing the data " +
                        "format same as configured from CSP.");
                int decimalExcel = MathUtil.getCountAfterDecimalPoint(MathUtil.toRoundoff(Double
                        .parseDouble(expConsumeOrAmount)));
                Assert.assertEquals(decimalExcel, decimalPlaces, decimalExcel + "values is not equal with "
                        + decimalPlaces);
            }
            row++;
        }
        // CLOSING THE CONNECTION
        closeConnectionWithExcel();
    }

    /**
     * Compare Hourly interval data with exported excel.
     *
     * @param consumptionsAmountUI
     * @param meters
     * @param unit
     */
    public static void compareHourlyUsageExcel(LinkedHashMap<String, String> consumptionsAmountUI, Meter[] meters,
                                               String unit) {
        // Init currency config
        String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
        String usageFileName = FilePaths.DOWNLOAD_PATH + FileUtil.getFileWithPartialName("Usage");
        List<String> meterList = new ArrayList<>();
        for (Meter value : meters) {
            meterList.add(value.getMeterNumber());
        }
        String meterNumbers = "Meter Number: " + StringUtil.addCommaToArrayList(meterList);
        int decimalPlaces = CSPConfiguration.initDecimalPlaceConfigCsp();
        // MAKE CONNECTION TO THE EXCEL FILE
        openExcelFile(usageFileName);
        sheet = getSheetName(0);
        int rowCount = getRowCount();
        String cellMeterValue = getCellValue(0, 0);
        Assert.assertTrue(cellMeterValue.equals(meterNumbers), "Meter Number Value "
                + meterNumbers + " does not match with the imported excel Meter Numbers" + cellMeterValue);
        String cellUsageTime = getCellValue(4, 0);
        Assert.assertEquals(cellUsageTime, "Time",
                "The Time column name does not match with the imported excel Time: " + cellUsageTime);
        // Verifying units
        String cellUnitsConsumed = getCellValue(4, 1);
        // Verifying units consumed
        if (unit.equals("kWh")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedKwh"),
                    "The column name Units Consumed (kWh) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("HCF")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedHCF"),
                    "The column name Units Consumed (HCF) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("Gallon")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedGal"),
                    "The column name Units Consumed (Gal) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("CCF")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedCCF"),
                    "The column name Units Consumed (CCF) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("Dollar")) {
            cellUnitsConsumed = getCellValue(4, 1);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblAmountHeader")
                            .replace("currencyConfig", currencyConfig),
                    "The column name Cost($) does not match with the imported excel."
                            + cellUnitsConsumed);
        }
        int row = 5;
        // Verifying the consumptions and amount
        for (Map.Entry<String, String> entry : consumptionsAmountUI.entrySet()) {
            String expMonth = entry.getKey();
            String expConsumeOrAmount = entry.getValue();
            String actMonth = getCellStringValueWithOutSpecialChar(row, 0).trim();
            expMonth = DateUtil.convertIntoSpecificDateFormat(expMonth, "MMMM yyyy",
                    "MMM, yyyy");
            Assert.assertEquals(actMonth, expMonth,
                    "Month not matched of UI with the Excel at iteration: " + (row - 5));
            if (unit.contains("Dollar")) {
                String actAmount = getCellStringValue(row, 1)
                        .replaceAll("[,'" + currencyConfig + "']", "");
                Double amountExcel = Double.parseDouble(actAmount);
                Double amountUI = Double.parseDouble(expConsumeOrAmount);
                MathUtil.assertDifference(amountExcel, amountUI);
                ExtentLogger.logInfo("Verify that 'Excel' file is downloaded containing the data " +
                        "format same as configured from CSP.");
            }
            else if (unit.equals("kWh") || unit.equals("HCF") || unit.equals("Gallon") || unit.equals("CCF")) {
                Double actConsumption = getDoubleCellValue(row, 2);
                Double expConsumption = Double.parseDouble(expConsumeOrAmount);
                MathUtil.assertDifference(actConsumption, expConsumption);
                ExtentLogger.logInfo("Verify that 'Excel' file is downloaded containing the data " +
                        "format same as configured from CSP.");
                int decimalExcel = MathUtil.getCountAfterDecimalPoint(MathUtil.toRoundoff(Double
                        .parseDouble(expConsumeOrAmount)));
                Assert.assertEquals(decimalExcel, decimalPlaces, decimalExcel + "values is not equal with "
                        + decimalPlaces);
            }
            row++;
        }
        // CLOSING THE CONNECTION
        closeConnectionWithExcel();
    }

    /**
     * Compare Minutes interval data with exported excel.
     *
     * @param consumptionsAmountUI
     * @param meters
     * @param unit
     */
    public static void compareQuarterlyUsageExcel(LinkedHashMap<String, String> consumptionsAmountUI, Meter[] meters,
                                                  String unit) {
        // Init currency config
        String currencyConfig = CSPConfiguration.initDateMetricsConfig().get("Currency");
        String usageFileName = FilePaths.DOWNLOAD_PATH + FileUtil.getFileWithPartialName("Usage");
        List<String> meterList = new ArrayList<>();
        for (Meter value : meters) {
            meterList.add(value.getMeterNumber());
        }
        String meterNumbers = "Meter Number: " + StringUtil.addCommaToArrayList(meterList);
        int decimalPlaces = CSPConfiguration.initDecimalPlaceConfigCsp();
        // MAKE CONNECTION TO EXCEL FILE
        openExcelFile(usageFileName);
        sheet = getSheetName(0);
        int rowCount = getRowCount();
        String cellMeterValue = getCellValue(0, 0);
        Assert.assertTrue(cellMeterValue.equals(meterNumbers), "Meter Number Value "
                + meterNumbers + " does not match with the imported excel Meter Numbers" + cellMeterValue);
        // UsageDate Column Name
        String cellUsageDate = getCellValue(4, 0);
        Assert.assertTrue(cellUsageDate.equals("UsageDate"),
                "The UsageDate column name does not match with the imported excel UsageDate: " + cellUsageDate);
        // 15 Min Interval Column Name
        String cellUsageTime = getCellValue(4, 1);
        Assert.assertTrue(cellUsageTime.equals("15 Min Interval"),
                "The UsageDate column name does not match with the imported excel UsageDate: " + cellUsageTime);
        // Verifying units for consumption
        String cellUnitsConsumed = getCellValue(4, 2);
        // Verifying units consumed
        if (unit.equals("kWh")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedKwh"),
                    "The column name Units Consumed (kWh) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("HCF")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedHCF"),
                    "The column name Units Consumed (HCF) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("Gallon")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedGal"),
                    "The column name Units Consumed (Gal) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("CCF")) {
            cellUnitsConsumed = getCellValue(4, 2);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblUnitsConsumedCCF"),
                    "The column name Units Consumed (CCF) does not match with the imported excel"
                            + cellUnitsConsumed);
        }
        else if (unit.equals("Dollar")) {
            cellUnitsConsumed = getCellValue(4, 1);
            Assert.assertEquals(cellUnitsConsumed, usageTextProp.getPropValue("lblAmountHeader")
                            .replace("currencyConfig", currencyConfig),
                    "The column name Cost($) does not match with the imported excel."
                            + cellUnitsConsumed);
        }
        int row = 5;
        // Verifying the consumptions and amount
        for (Map.Entry<String, String> entry : consumptionsAmountUI.entrySet()) {
            String expMonth = entry.getKey();
            String expConsumeOrAmount = entry.getValue();
            String actMonth = getCellStringValueWithOutSpecialChar(row, 0).trim();
            expMonth = DateUtil.convertIntoSpecificDateFormat(expMonth, "MMMM yyyy",
                    "MMM, yyyy");
            Assert.assertEquals(actMonth, expMonth,
                    "Month not matched of UI with the Excel at iteration: " + (row - 5));
            if (unit.contains("Dollar")) {
                String actAmount = getCellStringValue(row, 1)
                        .replaceAll("[,'" + currencyConfig + "']", "");
                Double amountExcel = Double.parseDouble(actAmount);
                Double amountUI = Double.parseDouble(expConsumeOrAmount);
                MathUtil.assertDifference(amountExcel, amountUI);
                ExtentLogger.logInfo("Verify that 'Excel' file is downloaded containing the data " +
                        "format same as configured from CSP.");
            }
            else if (unit.equals("kWh") || unit.equals("HCF") || unit.equals("Gallon") || unit.equals("CCF")) {
                Double actConsumption = getDoubleCellValue(row, 2);
                Double expConsumption = Double.parseDouble(expConsumeOrAmount);
                MathUtil.assertDifference(actConsumption, expConsumption);
                ExtentLogger.logInfo("Verify that 'Excel' file is downloaded containing the data " +
                        "format same as configured from CSP.");
                int decimalExcel = MathUtil.getCountAfterDecimalPoint(MathUtil.toRoundoff(Double
                        .parseDouble(expConsumeOrAmount)));
                Assert.assertEquals(decimalExcel, decimalPlaces, decimalExcel + "values is not equal with "
                        + decimalPlaces);
            }
            row++;
        }
        // CLOSING THE CONNECTION
        closeConnectionWithExcel();
    }
}
